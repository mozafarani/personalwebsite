{"version":3,"file":"create-component.js","sources":["src/create-component.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Match a prop name to a typed event callback by\n// adding an Event type as an expected property on a string.\nexport type EventName<T extends Event = Event> = string & {\n  __event_type: T;\n};\n\n// A key value map matching React prop names to event names\ntype EventNames = Record<string, EventName | string>;\n\n// A map of expected event listener types based on EventNames\ntype EventListeners<R extends EventNames> = {\n  [K in keyof R]: R[K] extends EventName\n    ? (e: R[K]['__event_type']) => void\n    : (e: Event) => void;\n};\n\ntype ReactProps<I, E> = Omit<React.HTMLAttributes<I>, keyof E>;\ntype ElementWithoutPropsOrEventListeners<I, E> = Omit<\n  I,\n  keyof E | keyof ReactProps<I, E>\n>;\n\n// Props the user is allowed to use, includes standard attributes, children,\n// ref, as well as special event and element properties.\ntype WebComponentProps<\n  I extends HTMLElement,\n  E extends EventNames = {}\n> = Partial<\n  ReactProps<I, E> &\n    ElementWithoutPropsOrEventListeners<I, E> &\n    EventListeners<E>\n>;\n\n// Props used by this component wrapper. This is the WebComponentProps and the\n// special `__forwardedRef` property. Note, this ref is special because\n// it's both needed in this component to get access to the rendered element\n// and must fulfill any ref passed by the user.\ntype ReactComponentProps<\n  I extends HTMLElement,\n  E extends EventNames = {}\n> = WebComponentProps<I, E> & {\n  __forwardedRef?: React.Ref<I>;\n};\n\nexport type ReactWebComponent<\n  I extends HTMLElement,\n  E extends EventNames = {}\n> = React.ForwardRefExoticComponent<\n  React.PropsWithoutRef<WebComponentProps<I, E>> & React.RefAttributes<I>\n>;\n\ntype Constructor<T> = {new (): T};\n\nconst reservedReactProperties = new Set([\n  'children',\n  'localName',\n  'ref',\n  'style',\n  'className',\n]);\n\nconst listenedEvents: WeakMap<\n  Element,\n  Map<string, EventListenerObject>\n> = new WeakMap();\n\n/**\n * Adds an event listener for the specified event to the given node. In the\n * React setup, there should only ever be one event listener. Thus, for\n * efficiency only one listener is added and the handler for that listener is\n * updated to point to the given listener function.\n */\nconst addOrUpdateEventListener = (\n  node: Element,\n  event: string,\n  listener: (event?: Event) => void\n) => {\n  let events = listenedEvents.get(node);\n  if (events === undefined) {\n    listenedEvents.set(node, (events = new Map()));\n  }\n  let handler = events.get(event);\n  if (listener !== undefined) {\n    // If necessary, add listener and track handler\n    if (handler === undefined) {\n      events.set(event, (handler = {handleEvent: listener}));\n      node.addEventListener(event, handler);\n      // Otherwise just update the listener with new value\n    } else {\n      handler.handleEvent = listener;\n    }\n    // Remove listener if one exists and value is undefined\n  } else if (handler !== undefined) {\n    events.delete(event);\n    node.removeEventListener(event, handler);\n  }\n};\n\n/**\n * Sets properties and events on custom elements. These properties and events\n * have been pre-filtered so we know they should apply to the custom element.\n */\nconst setProperty = <E extends Element>(\n  node: E,\n  name: string,\n  value: unknown,\n  old: unknown,\n  events?: EventNames\n) => {\n  const event = events?.[name];\n  if (event !== undefined) {\n    // Dirty check event value.\n    if (value !== old) {\n      addOrUpdateEventListener(node, event, value as (e?: Event) => void);\n    }\n  } else {\n    // But don't dirty check properties; elements are assumed to do this.\n    node[name as keyof E] = value as E[keyof E];\n  }\n};\n\n// Set a React ref. Note, there are 2 kinds of refs and there's no built in\n// React API to set a ref.\nconst setRef = (ref: React.Ref<unknown>, value: Element | null) => {\n  if (typeof ref === 'function') {\n    (ref as (e: Element | null) => void)(value);\n  } else {\n    (ref as {current: Element | null}).current = value;\n  }\n};\n\n/**\n * Creates a React component for a custom element. Properties are distinguished\n * from attributes automatically, and events can be configured so they are\n * added to the custom element as event listeners.\n *\n * @param React The React module, typically imported from the `react` npm\n * package.\n * @param tagName The custom element tag name registered via\n * `customElements.define`.\n * @param elementClass The custom element class registered via\n * `customElements.define`.\n * @param events An object listing events to which the component can listen. The\n * object keys are the event property names passed in via React props and the\n * object values are the names of the corresponding events generated by the\n * custom element. For example, given `{onactivate: 'activate'}` an event\n * function may be passed via the component's `onactivate` prop and will be\n * called when the custom element fires its `activate` event.\n * @param displayName A React component display name, used in debugging\n * messages. Default value is inferred from the name of custom element class\n * registered via `customElements.define`.\n */\nexport const createComponent = <\n  I extends HTMLElement,\n  E extends EventNames = {}\n>(\n  React: typeof window.React,\n  tagName: string,\n  elementClass: Constructor<I>,\n  events?: E,\n  displayName?: string\n): ReactWebComponent<I, E> => {\n  const Component = React.Component;\n  const createElement = React.createElement;\n  const eventProps = new Set(Object.keys(events ?? {}));\n\n  type Props = ReactComponentProps<I, E>;\n\n  class ReactComponent extends Component<Props> {\n    private _element: I | null = null;\n    private _elementProps!: {[index: string]: unknown};\n    private _userRef?: React.Ref<I>;\n    private _ref?: React.RefCallback<I>;\n\n    static displayName = displayName ?? elementClass.name;\n\n    private _updateElement(oldProps?: Props) {\n      if (this._element === null) {\n        return;\n      }\n      // Set element properties to the values in `this.props`\n      for (const prop in this._elementProps) {\n        setProperty(\n          this._element,\n          prop,\n          this.props[prop],\n          oldProps ? oldProps[prop] : undefined,\n          events\n        );\n      }\n      // Note, the spirit of React might be to \"unset\" any old values that\n      // are no longer included; however, there's no reasonable value to set\n      // them to so we just leave the previous state as is.\n    }\n\n    /**\n     * Updates element properties correctly setting properties\n     * on mount.\n     */\n    override componentDidMount() {\n      this._updateElement();\n    }\n\n    /**\n     * Updates element properties correctly setting properties\n     * on every update. Note, this does not include mount.\n     */\n    override componentDidUpdate(old: Props) {\n      this._updateElement(old);\n    }\n\n    /**\n     * Renders the custom element with a `ref` prop which allows this\n     * component to reference the custom element.\n     *\n     * Standard attributes are passed to React and element properties and events\n     * are updated in componentDidMount/componentDidUpdate.\n     *\n     */\n    override render() {\n      // Since refs only get fulfilled once, pass a new one if the user's\n      // ref changed. This allows refs to be fulfilled as expected, going from\n      // having a value to null.\n      const userRef = this.props.__forwardedRef ?? null;\n      if (this._ref === undefined || this._userRef !== userRef) {\n        this._ref = (value: I | null) => {\n          if (this._element === null) {\n            this._element = value;\n          }\n          if (userRef !== null) {\n            setRef(userRef, value);\n          }\n          this._userRef = userRef;\n        };\n      }\n      // Filters class properties out and passes the remaining\n      // attributes to React. This allows attributes to use framework rules\n      // for setting attributes and render correctly under SSR.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const props: any = {ref: this._ref};\n      // Note, save element props while iterating to avoid the need to\n      // iterate again when setting properties.\n      this._elementProps = {};\n      for (const [k, v] of Object.entries(this.props)) {\n        if (k === '__forwardedRef') continue;\n\n        if (\n          eventProps.has(k) ||\n          (!reservedReactProperties.has(k) &&\n            !(k in HTMLElement.prototype) &&\n            k in elementClass.prototype)\n        ) {\n          this._elementProps[k] = v;\n        } else {\n          // React does *not* handle `className` for custom elements so\n          // coerce it to `class` so it's handled correctly.\n          props[k === 'className' ? 'class' : k] = v;\n        }\n      }\n      return createElement<React.HTMLAttributes<I>, I>(tagName, props);\n    }\n  }\n\n  const ForwardedComponent: ReactWebComponent<I, E> = React.forwardRef<\n    I,\n    WebComponentProps<I, E>\n  >((props, ref) =>\n    createElement<Props, ReactComponent, typeof ReactComponent>(\n      ReactComponent,\n      {...props, __forwardedRef: ref},\n      props?.children\n    )\n  );\n\n  // To ease debugging in the React Developer Tools\n  ForwardedComponent.displayName = ReactComponent.displayName;\n\n  return ForwardedComponent;\n};\n"],"names":["reservedReactProperties","Set","listenedEvents","WeakMap","setProperty","node","name","value","old","events","event","undefined","listener","get","set","Map","handler","handleEvent","addEventListener","delete","removeEventListener","addOrUpdateEventListener","createComponent","React","tagName","elementClass","displayName","Component","createElement","eventProps","Object","keys","ReactComponent","constructor","this","_element","_updateElement","oldProps","prop","_elementProps","props","componentDidMount","componentDidUpdate","render","userRef","_a","__forwardedRef","_ref","_userRef","ref","current","setRef","k","v","entries","has","HTMLElement","prototype","ForwardedComponent","forwardRef","children"],"mappings":";;;;;AA2DA,MAAMA,EAA0B,IAAIC,IAAI,CACtC,WACA,YACA,MACA,QACA,cAGIC,EAGF,IAAIC,QAsCFC,EAAc,CAClBC,EACAC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAQD,eAAAA,EAASH,QACTK,IAAVD,EAEEH,IAAUC,GAxCe,EAC/BH,EACAK,EACAE,KAEA,IAAIH,EAASP,EAAeW,IAAIR,QACjBM,IAAXF,GACFP,EAAeY,IAAIT,EAAOI,EAAS,IAAIM,KAEzC,IAAIC,EAAUP,EAAOI,IAAIH,QACRC,IAAbC,OAEcD,IAAZK,GACFP,EAAOK,IAAIJ,EAAQM,EAAU,CAACC,YAAaL,IAC3CP,EAAKa,iBAAiBR,EAAOM,IAG7BA,EAAQC,YAAcL,OAGHD,IAAZK,IACTP,EAAOU,OAAOT,GACdL,EAAKe,oBAAoBV,EAAOM,GACjC,EAkBGK,CAAyBhB,EAAMK,EAAOH,GAIxCF,EAAKC,GAAmBC,CACzB,EAkCUe,EAAkB,CAI7BC,EACAC,EACAC,EACAhB,EACAiB,KAEA,MAAMC,EAAYJ,EAAMI,UAClBC,EAAgBL,EAAMK,cACtBC,EAAa,IAAI5B,IAAI6B,OAAOC,KAAKtB,QAAAA,EAAU,CAAA,IAIjD,MAAMuB,UAAuBL,EAA7BM,kCACUC,KAAQC,EAAa,IA4F9B,CArFSC,EAAeC,GACrB,GAAsB,OAAlBH,KAAKC,EAIT,IAAK,MAAMG,KAAQJ,KAAKK,EACtBnC,EACE8B,KAAKC,EACLG,EACAJ,KAAKM,MAAMF,GACXD,EAAWA,EAASC,QAAQ3B,EAC5BF,EAML,CAMQgC,oBACPP,KAAKE,GACN,CAMQM,mBAAmBlC,GAC1B0B,KAAKE,EAAe5B,EACrB,CAUQmC,eAIP,MAAMC,EAAuC,QAA7BC,EAAAX,KAAKM,MAAMM,YAAkB,IAAAD,EAAAA,EAAA,UAC3BlC,IAAduB,KAAKa,GAAsBb,KAAKc,IAAaJ,IAC/CV,KAAKa,EAAQxC,IACW,OAAlB2B,KAAKC,IACPD,KAAKC,EAAW5B,GAEF,OAAZqC,GA1GC,EAACK,EAAyB1C,KACpB,mBAAR0C,EACRA,EAAoC1C,GAEpC0C,EAAkCC,QAAU3C,CAC9C,EAsGS4C,CAAOP,EAASrC,GAElB2B,KAAKc,EAAWJ,CAAO,GAO3B,MAAMJ,EAAa,CAACS,IAAKf,KAAKa,GAG9Bb,KAAKK,EAAgB,GACrB,IAAK,MAAOa,EAAGC,KAAMvB,OAAOwB,QAAQpB,KAAKM,OAC7B,mBAANY,IAGFvB,EAAW0B,IAAIH,KACbpD,EAAwBuD,IAAIH,MAC1BA,KAAKI,YAAYC,YACnBL,KAAK3B,EAAagC,UAEpBvB,KAAKK,EAAca,GAAKC,EAIxBb,EAAY,cAANY,EAAoB,QAAUA,GAAKC,GAG7C,OAAOzB,EAA0CJ,EAASgB,EAC3D,EAtFMR,EAAWN,YAAGA,QAAAA,EAAeD,EAAanB,KAyFnD,MAAMoD,EAA8CnC,EAAMoC,YAGxD,CAACnB,EAAOS,IACRrB,EACEI,EACA,IAAIQ,EAAOM,KAAgBG,GAC3BT,eAAAA,EAAOoB,YAOX,OAFAF,EAAmBhC,YAAcM,EAAeN,YAEzCgC,CAAkB"}