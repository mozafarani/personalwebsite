import React, { forwardRef, useMemo } from 'react';
import Box from '../Box.js';
import '../sx.js';
import { useTheme } from '../ThemeProvider.js';
import { StyledButton } from './types.js';
import { getButtonStyles, getSizeStyles, getVariantStyles } from './styles.js';
import { useRefObjectAsForwardedRef } from '../hooks/useRefObjectAsForwardedRef.js';
import merge from 'deepmerge';

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const defaultSxProp = {};
const iconWrapStyles = {
  display: 'inline-block'
};
const trailingIconStyles = {
  ...iconWrapStyles,
  ml: 2
};
const ButtonBase = /*#__PURE__*/forwardRef(({
  children,
  as: Component = 'button',
  sx: sxProp = defaultSxProp,
  ...props
}, forwardedRef) => {
  const {
    leadingIcon: LeadingIcon,
    trailingIcon: TrailingIcon,
    variant = 'default',
    size = 'medium',
    ...rest
  } = props;
  const innerRef = React.useRef(null);
  useRefObjectAsForwardedRef(forwardedRef, innerRef);
  const {
    theme
  } = useTheme();
  const baseStyles = useMemo(() => {
    return merge.all([getButtonStyles(theme), getSizeStyles(size, variant, false), getVariantStyles(variant, theme)]);
  }, [theme, size, variant]);
  const sxStyles = useMemo(() => {
    return merge(baseStyles, sxProp);
  }, [baseStyles, sxProp]);
  if (process.env.NODE_ENV !== 'production') {
    /**
     * The Linter yells because it thinks this conditionally calls an effect,
     * but since this is a compile-time flag and not a runtime conditional
     * this is safe, and ensures the entire effect is kept out of prod builds
     * shaving precious bytes from the output, and avoiding mounting a noop effect
     */
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(() => {
      if (!(innerRef.current instanceof HTMLButtonElement) && !(innerRef.current instanceof HTMLAnchorElement)) {
        // eslint-disable-next-line no-console
        console.warn('This component should be an instanceof a semantic button or anchor');
      }
    }, [innerRef]);
  }
  return /*#__PURE__*/React.createElement(StyledButton, _extends({
    as: Component,
    sx: sxStyles
  }, rest, {
    ref: innerRef
  }), LeadingIcon && /*#__PURE__*/React.createElement(Box, {
    as: "span",
    "data-component": "leadingIcon",
    sx: iconWrapStyles
  }, /*#__PURE__*/React.createElement(LeadingIcon, null)), children && /*#__PURE__*/React.createElement("span", {
    "data-component": "text"
  }, children), TrailingIcon && /*#__PURE__*/React.createElement(Box, {
    as: "span",
    "data-component": "trailingIcon",
    sx: trailingIconStyles
  }, /*#__PURE__*/React.createElement(TrailingIcon, null)));
});

export { ButtonBase };
