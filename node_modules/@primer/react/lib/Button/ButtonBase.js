'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var Box = require('../Box.js');
require('../sx.js');
var ThemeProvider = require('../ThemeProvider.js');
var types = require('./types.js');
var styles = require('./styles.js');
var useRefObjectAsForwardedRef = require('../hooks/useRefObjectAsForwardedRef.js');
var merge = require('deepmerge');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const defaultSxProp = {};
const iconWrapStyles = {
  display: 'inline-block'
};
const trailingIconStyles = {
  ...iconWrapStyles,
  ml: 2
};
const ButtonBase = /*#__PURE__*/React.forwardRef(({
  children,
  as: Component = 'button',
  sx: sxProp = defaultSxProp,
  ...props
}, forwardedRef) => {
  const {
    leadingIcon: LeadingIcon,
    trailingIcon: TrailingIcon,
    variant = 'default',
    size = 'medium',
    ...rest
  } = props;
  const innerRef = React__default["default"].useRef(null);
  useRefObjectAsForwardedRef.useRefObjectAsForwardedRef(forwardedRef, innerRef);
  const {
    theme
  } = ThemeProvider.useTheme();
  const baseStyles = React.useMemo(() => {
    return merge__default["default"].all([styles.getButtonStyles(theme), styles.getSizeStyles(size, variant, false), styles.getVariantStyles(variant, theme)]);
  }, [theme, size, variant]);
  const sxStyles = React.useMemo(() => {
    return merge__default["default"](baseStyles, sxProp);
  }, [baseStyles, sxProp]);
  if (process.env.NODE_ENV !== 'production') {
    /**
     * The Linter yells because it thinks this conditionally calls an effect,
     * but since this is a compile-time flag and not a runtime conditional
     * this is safe, and ensures the entire effect is kept out of prod builds
     * shaving precious bytes from the output, and avoiding mounting a noop effect
     */
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React__default["default"].useEffect(() => {
      if (!(innerRef.current instanceof HTMLButtonElement) && !(innerRef.current instanceof HTMLAnchorElement)) {
        // eslint-disable-next-line no-console
        console.warn('This component should be an instanceof a semantic button or anchor');
      }
    }, [innerRef]);
  }
  return /*#__PURE__*/React__default["default"].createElement(types.StyledButton, _extends({
    as: Component,
    sx: sxStyles
  }, rest, {
    ref: innerRef
  }), LeadingIcon && /*#__PURE__*/React__default["default"].createElement(Box, {
    as: "span",
    "data-component": "leadingIcon",
    sx: iconWrapStyles
  }, /*#__PURE__*/React__default["default"].createElement(LeadingIcon, null)), children && /*#__PURE__*/React__default["default"].createElement("span", {
    "data-component": "text"
  }, children), TrailingIcon && /*#__PURE__*/React__default["default"].createElement(Box, {
    as: "span",
    "data-component": "trailingIcon",
    sx: trailingIconStyles
  }, /*#__PURE__*/React__default["default"].createElement(TrailingIcon, null)));
});

exports.ButtonBase = ButtonBase;
