{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { useCallback, useMemo, useEffect } from 'react';\n\n/**\n * Calls all handlers in reverse order\n * @param event The KeyboardEvent generated by the Escape keydown.\n */\nfunction handleEscape(event) {\n  if (!event.defaultPrevented) {\n    var _iterator = _createForOfIteratorHelper(Object.values(registry).reverse()),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var handler = _step.value;\n        handler(event);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (event.defaultPrevented) break;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n}\nvar registry = {};\nfunction register(id, handler) {\n  registry[id] = handler;\n}\nfunction deregister(id) {\n  delete registry[id];\n}\n\n// For auto-incrementing unique identifiers for registered handlers.\nvar handlerId = 0;\n\n/**\n * Sets up a `keydown` listener on `window.document`. If\n * 1) The pressed key is \"Escape\", and\n * 2) The event has not had `.preventDefault()` called\n * The given callback will be executed.\n *\n * Note: If multiple `useOnEscapePress` hooks are active simultaneously, the\n * callbacks will occur in reverse order. In other words, if a parent component\n * and a child component both call `useOnEscapePress`, when the user presses\n * Escape, the child component's callback will execute, followed by the parent's\n * callback. Each callback has the chance to call `.preventDefault()` on the\n * event to prevent further callbacks.\n *\n * @param callback {(e: KeyboardEvent) => void} The callback that gets executed\n * when the Escape key is pressed. The KeyboardEvent generated by the Escape\n * keypress is passed as the only argument.\n *\n * @param callbackDependencies {React.DependencyList} The dependencies of the given\n * `onEscape` callback for memoization. Omit this param if the callback is already\n * memoized. See `React.useCallback` for more info on memoization.\n */\nvar useOnEscapePress = function useOnEscapePress(onEscape) {\n  var callbackDependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [onEscape];\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  var escapeCallback = useCallback(onEscape, callbackDependencies);\n  var handler = useCallback(function (event) {\n    if (event.key === 'Escape') escapeCallback(event);\n  }, [escapeCallback]);\n  var id = useMemo(function () {\n    return handlerId++;\n  }, []);\n  useEffect(function () {\n    if (Object.keys(registry).length === 0) {\n      document.addEventListener('keydown', handleEscape);\n    }\n    register(id, handler);\n    return function () {\n      deregister(id);\n      if (Object.keys(registry).length === 0) {\n        document.removeEventListener('keydown', handleEscape);\n      }\n    };\n  }, [id, handler]);\n};\nexport { useOnEscapePress };","map":{"version":3,"names":["useCallback","useMemo","useEffect","handleEscape","event","defaultPrevented","Object","values","registry","reverse","handler","register","id","deregister","handlerId","useOnEscapePress","onEscape","callbackDependencies","escapeCallback","key","keys","length","document","addEventListener","removeEventListener"],"sources":["/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@primer/react/lib-esm/hooks/useOnEscapePress.js"],"sourcesContent":["import { useCallback, useMemo, useEffect } from 'react';\n\n/**\n * Calls all handlers in reverse order\n * @param event The KeyboardEvent generated by the Escape keydown.\n */\nfunction handleEscape(event) {\n  if (!event.defaultPrevented) {\n    for (const handler of Object.values(registry).reverse()) {\n      handler(event);\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (event.defaultPrevented) break;\n    }\n  }\n}\nconst registry = {};\nfunction register(id, handler) {\n  registry[id] = handler;\n}\nfunction deregister(id) {\n  delete registry[id];\n}\n\n// For auto-incrementing unique identifiers for registered handlers.\nlet handlerId = 0;\n\n/**\n * Sets up a `keydown` listener on `window.document`. If\n * 1) The pressed key is \"Escape\", and\n * 2) The event has not had `.preventDefault()` called\n * The given callback will be executed.\n *\n * Note: If multiple `useOnEscapePress` hooks are active simultaneously, the\n * callbacks will occur in reverse order. In other words, if a parent component\n * and a child component both call `useOnEscapePress`, when the user presses\n * Escape, the child component's callback will execute, followed by the parent's\n * callback. Each callback has the chance to call `.preventDefault()` on the\n * event to prevent further callbacks.\n *\n * @param callback {(e: KeyboardEvent) => void} The callback that gets executed\n * when the Escape key is pressed. The KeyboardEvent generated by the Escape\n * keypress is passed as the only argument.\n *\n * @param callbackDependencies {React.DependencyList} The dependencies of the given\n * `onEscape` callback for memoization. Omit this param if the callback is already\n * memoized. See `React.useCallback` for more info on memoization.\n */\nconst useOnEscapePress = (onEscape, callbackDependencies = [onEscape]) => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const escapeCallback = useCallback(onEscape, callbackDependencies);\n  const handler = useCallback(event => {\n    if (event.key === 'Escape') escapeCallback(event);\n  }, [escapeCallback]);\n  const id = useMemo(() => handlerId++, []);\n  useEffect(() => {\n    if (Object.keys(registry).length === 0) {\n      document.addEventListener('keydown', handleEscape);\n    }\n    register(id, handler);\n    return () => {\n      deregister(id);\n      if (Object.keys(registry).length === 0) {\n        document.removeEventListener('keydown', handleEscape);\n      }\n    };\n  }, [id, handler]);\n};\n\nexport { useOnEscapePress };\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;;AAEvD;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACC,KAAK,EAAE;EAC3B,IAAI,CAACA,KAAK,CAACC,gBAAgB,EAAE;IAAA,2CACLC,MAAM,CAACC,MAAM,CAACC,QAAQ,CAAC,CAACC,OAAO,EAAE;MAAA;IAAA;MAAvD,oDAAyD;QAAA,IAA9CC,OAAO;QAChBA,OAAO,CAACN,KAAK,CAAC;QACd;QACA,IAAIA,KAAK,CAACC,gBAAgB,EAAE;MAC9B;IAAC;MAAA;IAAA;MAAA;IAAA;EACH;AACF;AACA,IAAMG,QAAQ,GAAG,CAAC,CAAC;AACnB,SAASG,QAAQ,CAACC,EAAE,EAAEF,OAAO,EAAE;EAC7BF,QAAQ,CAACI,EAAE,CAAC,GAAGF,OAAO;AACxB;AACA,SAASG,UAAU,CAACD,EAAE,EAAE;EACtB,OAAOJ,QAAQ,CAACI,EAAE,CAAC;AACrB;;AAEA;AACA,IAAIE,SAAS,GAAG,CAAC;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,QAAQ,EAAwC;EAAA,IAAtCC,oBAAoB,uEAAG,CAACD,QAAQ,CAAC;EACnE;EACA,IAAME,cAAc,GAAGlB,WAAW,CAACgB,QAAQ,EAAEC,oBAAoB,CAAC;EAClE,IAAMP,OAAO,GAAGV,WAAW,CAAC,UAAAI,KAAK,EAAI;IACnC,IAAIA,KAAK,CAACe,GAAG,KAAK,QAAQ,EAAED,cAAc,CAACd,KAAK,CAAC;EACnD,CAAC,EAAE,CAACc,cAAc,CAAC,CAAC;EACpB,IAAMN,EAAE,GAAGX,OAAO,CAAC;IAAA,OAAMa,SAAS,EAAE;EAAA,GAAE,EAAE,CAAC;EACzCZ,SAAS,CAAC,YAAM;IACd,IAAII,MAAM,CAACc,IAAI,CAACZ,QAAQ,CAAC,CAACa,MAAM,KAAK,CAAC,EAAE;MACtCC,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEpB,YAAY,CAAC;IACpD;IACAQ,QAAQ,CAACC,EAAE,EAAEF,OAAO,CAAC;IACrB,OAAO,YAAM;MACXG,UAAU,CAACD,EAAE,CAAC;MACd,IAAIN,MAAM,CAACc,IAAI,CAACZ,QAAQ,CAAC,CAACa,MAAM,KAAK,CAAC,EAAE;QACtCC,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAErB,YAAY,CAAC;MACvD;IACF,CAAC;EACH,CAAC,EAAE,CAACS,EAAE,EAAEF,OAAO,CAAC,CAAC;AACnB,CAAC;AAED,SAASK,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}