{"ast":null,"code":"import React, { useContext, useRef, useState, useMemo, useEffect } from 'react';\nimport { scrollIntoView } from '@primer/behaviors';\nimport { ActionList } from '../deprecated/ActionList/index.js';\nimport { useFocusZone } from '../hooks/useFocusZone.js';\nimport Box from '../Box.js';\nimport Spinner from '../Spinner.js';\nimport { AutocompleteContext } from './AutocompleteContext.js';\nimport { PlusIcon } from '@primer/octicons-react';\nimport VisuallyHidden from '../_VisuallyHidden.js';\nimport { useSSRSafeId } from '@react-aria/ssr';\nconst getDefaultSortFn = isItemSelectedFn => (itemIdA, itemIdB) => isItemSelectedFn(itemIdA) === isItemSelectedFn(itemIdB) ? 0 : isItemSelectedFn(itemIdA) ? -1 : 1;\nconst menuScrollMargins = {\n  startMargin: 0,\n  endMargin: 8\n};\nfunction getDefaultItemFilter(filterValue) {\n  return function (item, _i) {\n    var _item$text;\n    return Boolean((_item$text = item.text) === null || _item$text === void 0 ? void 0 : _item$text.toLowerCase().startsWith(filterValue.toLowerCase()));\n  };\n}\nfunction getdefaultCheckedSelectionChange(setInputValueFn) {\n  return function (itemOrItems) {\n    const {\n      text = ''\n    } = Array.isArray(itemOrItems) ? itemOrItems.slice(-1)[0] : itemOrItems;\n    setInputValueFn(text);\n  };\n}\nconst isItemSelected = (itemId, selectedItemIds) => selectedItemIds.includes(itemId);\nfunction getItemById(itemId, items) {\n  return items.find(item => item.id === itemId);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction AutocompleteMenu(props) {\n  const autocompleteContext = useContext(AutocompleteContext);\n  if (autocompleteContext === null) {\n    throw new Error('AutocompleteContext returned null values');\n  }\n  const {\n    activeDescendantRef,\n    id,\n    inputRef,\n    inputValue = '',\n    scrollContainerRef,\n    setAutocompleteSuggestion,\n    setShowMenu,\n    setInputValue,\n    setIsMenuDirectlyActivated,\n    setSelectedItemLength,\n    showMenu\n  } = autocompleteContext;\n  const {\n    items,\n    selectedItemIds,\n    sortOnCloseFn,\n    emptyStateText,\n    addNewItem,\n    loading,\n    selectionVariant,\n    filterFn,\n    'aria-labelledby': ariaLabelledBy,\n    onOpenChange,\n    onSelectedChange,\n    customScrollContainerRef\n  } = props;\n  const listContainerRef = useRef(null);\n  const [highlightedItem, setHighlightedItem] = useState();\n  const [sortedItemIds, setSortedItemIds] = useState(items.map(_ref => {\n    let {\n      id: itemId\n    } = _ref;\n    return itemId;\n  }));\n  const generatedUniqueId = useSSRSafeId(id);\n  const selectableItems = useMemo(() => items.map(selectableItem => {\n    return {\n      ...selectableItem,\n      role: 'option',\n      id: selectableItem.id,\n      selected: selectionVariant === 'multiple' ? selectedItemIds.includes(selectableItem.id) : undefined,\n      onAction: item => {\n        const otherSelectedItemIds = selectedItemIds.filter(selectedItemId => selectedItemId !== item.id);\n        const newSelectedItemIds = selectedItemIds.includes(item.id) ? otherSelectedItemIds : [...otherSelectedItemIds, item.id];\n        const onSelectedChangeFn = onSelectedChange ? onSelectedChange : getdefaultCheckedSelectionChange(setInputValue);\n        onSelectedChangeFn(newSelectedItemIds.map(newSelectedItemId => getItemById(newSelectedItemId, items)));\n        if (selectionVariant === 'multiple') {\n          setInputValue('');\n          setAutocompleteSuggestion('');\n        } else {\n          var _inputRef$current;\n          setShowMenu(false);\n          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n        }\n      }\n    };\n  }), [items, selectedItemIds, inputRef, onSelectedChange, selectionVariant, setAutocompleteSuggestion, setInputValue, setShowMenu]);\n  const itemSortOrderData = useMemo(() => sortedItemIds.reduce((acc, curr, i) => {\n    acc[curr] = i;\n    return acc;\n  }, {}), [sortedItemIds]);\n  const sortedAndFilteredItemsToRender = useMemo(() => selectableItems.filter(filterFn ? filterFn : getDefaultItemFilter(inputValue)).sort((a, b) => itemSortOrderData[a.id] - itemSortOrderData[b.id]), [selectableItems, itemSortOrderData, filterFn, inputValue]);\n  const allItemsToRender = useMemo(() => [\n  // sorted and filtered selectable items\n  ...sortedAndFilteredItemsToRender,\n  // menu item used for creating a token from whatever is in the text input\n  ...(addNewItem ? [{\n    ...addNewItem,\n    leadingVisual: () => /*#__PURE__*/React.createElement(PlusIcon, null),\n    onAction: item => {\n      // TODO: make it possible to pass a leadingVisual when using `addNewItem`\n      addNewItem.handleAddItem({\n        ...item,\n        id: item.id || generatedUniqueId,\n        leadingVisual: undefined\n      });\n      if (selectionVariant === 'multiple') {\n        setInputValue('');\n        setAutocompleteSuggestion('');\n      }\n    }\n  }] : [])], [sortedAndFilteredItemsToRender, addNewItem, setAutocompleteSuggestion, selectionVariant, setInputValue, generatedUniqueId]);\n  useFocusZone({\n    containerRef: listContainerRef,\n    focusOutBehavior: 'wrap',\n    focusableElementFilter: element => {\n      return !(element instanceof HTMLInputElement);\n    },\n    activeDescendantFocus: inputRef,\n    onActiveDescendantChanged: (current, _previous, directlyActivated) => {\n      activeDescendantRef.current = current || null;\n      if (current) {\n        const selectedItem = selectableItems.find(item => item.id.toString() === current.getAttribute('data-id'));\n        setHighlightedItem(selectedItem);\n        setIsMenuDirectlyActivated(directlyActivated);\n      }\n      if (current && customScrollContainerRef && customScrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, customScrollContainerRef.current, menuScrollMargins);\n      } else if (current && scrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, scrollContainerRef.current, menuScrollMargins);\n      }\n    }\n  }, [loading]);\n  useEffect(() => {\n    var _highlightedItem$text;\n    if (highlightedItem !== null && highlightedItem !== void 0 && (_highlightedItem$text = highlightedItem.text) !== null && _highlightedItem$text !== void 0 && _highlightedItem$text.startsWith(inputValue) && !selectedItemIds.includes(highlightedItem.id)) {\n      setAutocompleteSuggestion(highlightedItem.text);\n    } else {\n      setAutocompleteSuggestion('');\n    }\n  }, [highlightedItem, inputValue, selectedItemIds, setAutocompleteSuggestion]);\n  useEffect(() => {\n    const itemIdSortResult = [...sortedItemIds].sort(sortOnCloseFn ? sortOnCloseFn : getDefaultSortFn(itemId => isItemSelected(itemId, selectedItemIds)));\n    const sortResultMatchesState = itemIdSortResult.length === sortedItemIds.length && itemIdSortResult.every((element, index) => element === sortedItemIds[index]);\n    if (showMenu === false && !sortResultMatchesState) {\n      setSortedItemIds(itemIdSortResult);\n    }\n    onOpenChange && onOpenChange(Boolean(showMenu));\n  }, [showMenu, onOpenChange, selectedItemIds, sortOnCloseFn, sortedItemIds]);\n  useEffect(() => {\n    if (selectedItemIds.length) {\n      setSelectedItemLength(selectedItemIds.length);\n    }\n  }, [selectedItemIds, setSelectedItemLength]);\n  return /*#__PURE__*/React.createElement(VisuallyHidden, {\n    isVisible: showMenu\n  }, loading ? /*#__PURE__*/React.createElement(Box, {\n    p: 3,\n    display: \"flex\",\n    justifyContent: \"center\"\n  }, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(\"div\", {\n    ref: listContainerRef\n  }, allItemsToRender.length ? /*#__PURE__*/React.createElement(ActionList, {\n    selectionVariant: \"multiple\"\n    // have to typecast to `ItemProps` because we have an extra property\n    // on `items` for Autocomplete: `metadata`\n    ,\n\n    items: allItemsToRender,\n    role: \"listbox\",\n    id: `${id}-listbox`,\n    \"aria-labelledby\": ariaLabelledBy\n  }) : /*#__PURE__*/React.createElement(Box, {\n    p: 3\n  }, emptyStateText)));\n}\nAutocompleteMenu.displayName = \"AutocompleteMenu\";\nAutocompleteMenu.defaultProps = {\n  emptyStateText: 'No selectable options',\n  selectionVariant: 'single'\n};\nAutocompleteMenu.displayName = 'AutocompleteMenu';\nexport { AutocompleteMenu as default };","map":{"version":3,"names":["React","useContext","useRef","useState","useMemo","useEffect","scrollIntoView","ActionList","useFocusZone","Box","Spinner","AutocompleteContext","PlusIcon","VisuallyHidden","useSSRSafeId","getDefaultSortFn","isItemSelectedFn","itemIdA","itemIdB","menuScrollMargins","startMargin","endMargin","getDefaultItemFilter","filterValue","item","_i","_item$text","Boolean","text","toLowerCase","startsWith","getdefaultCheckedSelectionChange","setInputValueFn","itemOrItems","Array","isArray","slice","isItemSelected","itemId","selectedItemIds","includes","getItemById","items","find","id","AutocompleteMenu","props","autocompleteContext","Error","activeDescendantRef","inputRef","inputValue","scrollContainerRef","setAutocompleteSuggestion","setShowMenu","setInputValue","setIsMenuDirectlyActivated","setSelectedItemLength","showMenu","sortOnCloseFn","emptyStateText","addNewItem","loading","selectionVariant","filterFn","ariaLabelledBy","onOpenChange","onSelectedChange","customScrollContainerRef","listContainerRef","highlightedItem","setHighlightedItem","sortedItemIds","setSortedItemIds","map","generatedUniqueId","selectableItems","selectableItem","role","selected","undefined","onAction","otherSelectedItemIds","filter","selectedItemId","newSelectedItemIds","onSelectedChangeFn","newSelectedItemId","_inputRef$current","current","setSelectionRange","value","length","itemSortOrderData","reduce","acc","curr","i","sortedAndFilteredItemsToRender","sort","a","b","allItemsToRender","leadingVisual","createElement","handleAddItem","containerRef","focusOutBehavior","focusableElementFilter","element","HTMLInputElement","activeDescendantFocus","onActiveDescendantChanged","_previous","directlyActivated","selectedItem","toString","getAttribute","_highlightedItem$text","itemIdSortResult","sortResultMatchesState","every","index","isVisible","p","display","justifyContent","ref","displayName","defaultProps","default"],"sources":["/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@primer/react/lib-esm/Autocomplete/AutocompleteMenu.js"],"sourcesContent":["import React, { useContext, useRef, useState, useMemo, useEffect } from 'react';\nimport { scrollIntoView } from '@primer/behaviors';\nimport { ActionList } from '../deprecated/ActionList/index.js';\nimport { useFocusZone } from '../hooks/useFocusZone.js';\nimport Box from '../Box.js';\nimport Spinner from '../Spinner.js';\nimport { AutocompleteContext } from './AutocompleteContext.js';\nimport { PlusIcon } from '@primer/octicons-react';\nimport VisuallyHidden from '../_VisuallyHidden.js';\nimport { useSSRSafeId } from '@react-aria/ssr';\n\nconst getDefaultSortFn = isItemSelectedFn => (itemIdA, itemIdB) => isItemSelectedFn(itemIdA) === isItemSelectedFn(itemIdB) ? 0 : isItemSelectedFn(itemIdA) ? -1 : 1;\nconst menuScrollMargins = {\n  startMargin: 0,\n  endMargin: 8\n};\nfunction getDefaultItemFilter(filterValue) {\n  return function (item, _i) {\n    var _item$text;\n    return Boolean((_item$text = item.text) === null || _item$text === void 0 ? void 0 : _item$text.toLowerCase().startsWith(filterValue.toLowerCase()));\n  };\n}\nfunction getdefaultCheckedSelectionChange(setInputValueFn) {\n  return function (itemOrItems) {\n    const {\n      text = ''\n    } = Array.isArray(itemOrItems) ? itemOrItems.slice(-1)[0] : itemOrItems;\n    setInputValueFn(text);\n  };\n}\nconst isItemSelected = (itemId, selectedItemIds) => selectedItemIds.includes(itemId);\nfunction getItemById(itemId, items) {\n  return items.find(item => item.id === itemId);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction AutocompleteMenu(props) {\n  const autocompleteContext = useContext(AutocompleteContext);\n  if (autocompleteContext === null) {\n    throw new Error('AutocompleteContext returned null values');\n  }\n  const {\n    activeDescendantRef,\n    id,\n    inputRef,\n    inputValue = '',\n    scrollContainerRef,\n    setAutocompleteSuggestion,\n    setShowMenu,\n    setInputValue,\n    setIsMenuDirectlyActivated,\n    setSelectedItemLength,\n    showMenu\n  } = autocompleteContext;\n  const {\n    items,\n    selectedItemIds,\n    sortOnCloseFn,\n    emptyStateText,\n    addNewItem,\n    loading,\n    selectionVariant,\n    filterFn,\n    'aria-labelledby': ariaLabelledBy,\n    onOpenChange,\n    onSelectedChange,\n    customScrollContainerRef\n  } = props;\n  const listContainerRef = useRef(null);\n  const [highlightedItem, setHighlightedItem] = useState();\n  const [sortedItemIds, setSortedItemIds] = useState(items.map(({\n    id: itemId\n  }) => itemId));\n  const generatedUniqueId = useSSRSafeId(id);\n  const selectableItems = useMemo(() => items.map(selectableItem => {\n    return {\n      ...selectableItem,\n      role: 'option',\n      id: selectableItem.id,\n      selected: selectionVariant === 'multiple' ? selectedItemIds.includes(selectableItem.id) : undefined,\n      onAction: item => {\n        const otherSelectedItemIds = selectedItemIds.filter(selectedItemId => selectedItemId !== item.id);\n        const newSelectedItemIds = selectedItemIds.includes(item.id) ? otherSelectedItemIds : [...otherSelectedItemIds, item.id];\n        const onSelectedChangeFn = onSelectedChange ? onSelectedChange : getdefaultCheckedSelectionChange(setInputValue);\n        onSelectedChangeFn(newSelectedItemIds.map(newSelectedItemId => getItemById(newSelectedItemId, items)));\n        if (selectionVariant === 'multiple') {\n          setInputValue('');\n          setAutocompleteSuggestion('');\n        } else {\n          var _inputRef$current;\n          setShowMenu(false);\n          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n        }\n      }\n    };\n  }), [items, selectedItemIds, inputRef, onSelectedChange, selectionVariant, setAutocompleteSuggestion, setInputValue, setShowMenu]);\n  const itemSortOrderData = useMemo(() => sortedItemIds.reduce((acc, curr, i) => {\n    acc[curr] = i;\n    return acc;\n  }, {}), [sortedItemIds]);\n  const sortedAndFilteredItemsToRender = useMemo(() => selectableItems.filter(filterFn ? filterFn : getDefaultItemFilter(inputValue)).sort((a, b) => itemSortOrderData[a.id] - itemSortOrderData[b.id]), [selectableItems, itemSortOrderData, filterFn, inputValue]);\n  const allItemsToRender = useMemo(() => [\n  // sorted and filtered selectable items\n  ...sortedAndFilteredItemsToRender,\n  // menu item used for creating a token from whatever is in the text input\n  ...(addNewItem ? [{\n    ...addNewItem,\n    leadingVisual: () => /*#__PURE__*/React.createElement(PlusIcon, null),\n    onAction: item => {\n      // TODO: make it possible to pass a leadingVisual when using `addNewItem`\n      addNewItem.handleAddItem({\n        ...item,\n        id: item.id || generatedUniqueId,\n        leadingVisual: undefined\n      });\n      if (selectionVariant === 'multiple') {\n        setInputValue('');\n        setAutocompleteSuggestion('');\n      }\n    }\n  }] : [])], [sortedAndFilteredItemsToRender, addNewItem, setAutocompleteSuggestion, selectionVariant, setInputValue, generatedUniqueId]);\n  useFocusZone({\n    containerRef: listContainerRef,\n    focusOutBehavior: 'wrap',\n    focusableElementFilter: element => {\n      return !(element instanceof HTMLInputElement);\n    },\n    activeDescendantFocus: inputRef,\n    onActiveDescendantChanged: (current, _previous, directlyActivated) => {\n      activeDescendantRef.current = current || null;\n      if (current) {\n        const selectedItem = selectableItems.find(item => item.id.toString() === current.getAttribute('data-id'));\n        setHighlightedItem(selectedItem);\n        setIsMenuDirectlyActivated(directlyActivated);\n      }\n      if (current && customScrollContainerRef && customScrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, customScrollContainerRef.current, menuScrollMargins);\n      } else if (current && scrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, scrollContainerRef.current, menuScrollMargins);\n      }\n    }\n  }, [loading]);\n  useEffect(() => {\n    var _highlightedItem$text;\n    if (highlightedItem !== null && highlightedItem !== void 0 && (_highlightedItem$text = highlightedItem.text) !== null && _highlightedItem$text !== void 0 && _highlightedItem$text.startsWith(inputValue) && !selectedItemIds.includes(highlightedItem.id)) {\n      setAutocompleteSuggestion(highlightedItem.text);\n    } else {\n      setAutocompleteSuggestion('');\n    }\n  }, [highlightedItem, inputValue, selectedItemIds, setAutocompleteSuggestion]);\n  useEffect(() => {\n    const itemIdSortResult = [...sortedItemIds].sort(sortOnCloseFn ? sortOnCloseFn : getDefaultSortFn(itemId => isItemSelected(itemId, selectedItemIds)));\n    const sortResultMatchesState = itemIdSortResult.length === sortedItemIds.length && itemIdSortResult.every((element, index) => element === sortedItemIds[index]);\n    if (showMenu === false && !sortResultMatchesState) {\n      setSortedItemIds(itemIdSortResult);\n    }\n    onOpenChange && onOpenChange(Boolean(showMenu));\n  }, [showMenu, onOpenChange, selectedItemIds, sortOnCloseFn, sortedItemIds]);\n  useEffect(() => {\n    if (selectedItemIds.length) {\n      setSelectedItemLength(selectedItemIds.length);\n    }\n  }, [selectedItemIds, setSelectedItemLength]);\n  return /*#__PURE__*/React.createElement(VisuallyHidden, {\n    isVisible: showMenu\n  }, loading ? /*#__PURE__*/React.createElement(Box, {\n    p: 3,\n    display: \"flex\",\n    justifyContent: \"center\"\n  }, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(\"div\", {\n    ref: listContainerRef\n  }, allItemsToRender.length ? /*#__PURE__*/React.createElement(ActionList, {\n    selectionVariant: \"multiple\"\n    // have to typecast to `ItemProps` because we have an extra property\n    // on `items` for Autocomplete: `metadata`\n    ,\n    items: allItemsToRender,\n    role: \"listbox\",\n    id: `${id}-listbox`,\n    \"aria-labelledby\": ariaLabelledBy\n  }) : /*#__PURE__*/React.createElement(Box, {\n    p: 3\n  }, emptyStateText)));\n}\nAutocompleteMenu.displayName = \"AutocompleteMenu\";\nAutocompleteMenu.defaultProps = {\n  emptyStateText: 'No selectable options',\n  selectionVariant: 'single'\n};\nAutocompleteMenu.displayName = 'AutocompleteMenu';\n\nexport { AutocompleteMenu as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}