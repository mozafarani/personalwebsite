{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst reservedReactProperties = new Set(['children', 'localName', 'ref', 'style', 'className']);\nconst listenedEvents = new WeakMap();\n/**\n * Adds an event listener for the specified event to the given node. In the\n * React setup, there should only ever be one event listener. Thus, for\n * efficiency only one listener is added and the handler for that listener is\n * updated to point to the given listener function.\n */\nconst addOrUpdateEventListener = (node, event, listener) => {\n  let events = listenedEvents.get(node);\n  if (events === undefined) {\n    listenedEvents.set(node, events = new Map());\n  }\n  let handler = events.get(event);\n  if (listener !== undefined) {\n    // If necessary, add listener and track handler\n    if (handler === undefined) {\n      events.set(event, handler = {\n        handleEvent: listener\n      });\n      node.addEventListener(event, handler);\n      // Otherwise just update the listener with new value\n    } else {\n      handler.handleEvent = listener;\n    }\n    // Remove listener if one exists and value is undefined\n  } else if (handler !== undefined) {\n    events.delete(event);\n    node.removeEventListener(event, handler);\n  }\n};\n/**\n * Sets properties and events on custom elements. These properties and events\n * have been pre-filtered so we know they should apply to the custom element.\n */\nconst setProperty = (node, name, value, old, events) => {\n  const event = events === null || events === void 0 ? void 0 : events[name];\n  if (event !== undefined) {\n    // Dirty check event value.\n    if (value !== old) {\n      addOrUpdateEventListener(node, event, value);\n    }\n  } else {\n    // But don't dirty check properties; elements are assumed to do this.\n    node[name] = value;\n  }\n};\n// Set a React ref. Note, there are 2 kinds of refs and there's no built in\n// React API to set a ref.\nconst setRef = (ref, value) => {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else {\n    ref.current = value;\n  }\n};\n/**\n * Creates a React component for a custom element. Properties are distinguished\n * from attributes automatically, and events can be configured so they are\n * added to the custom element as event listeners.\n *\n * @param React The React module, typically imported from the `react` npm\n * package.\n * @param tagName The custom element tag name registered via\n * `customElements.define`.\n * @param elementClass The custom element class registered via\n * `customElements.define`.\n * @param events An object listing events to which the component can listen. The\n * object keys are the event property names passed in via React props and the\n * object values are the names of the corresponding events generated by the\n * custom element. For example, given `{onactivate: 'activate'}` an event\n * function may be passed via the component's `onactivate` prop and will be\n * called when the custom element fires its `activate` event.\n * @param displayName A React component display name, used in debugging\n * messages. Default value is inferred from the name of custom element class\n * registered via `customElements.define`.\n */\nexport const createComponent = (React, tagName, elementClass, events, displayName) => {\n  const Component = React.Component;\n  const createElement = React.createElement;\n  const eventProps = new Set(Object.keys(events !== null && events !== void 0 ? events : {}));\n  class ReactComponent extends Component {\n    constructor() {\n      super(...arguments);\n      this._element = null;\n    }\n    _updateElement(oldProps) {\n      if (this._element === null) {\n        return;\n      }\n      // Set element properties to the values in `this.props`\n      for (const prop in this._elementProps) {\n        setProperty(this._element, prop, this.props[prop], oldProps ? oldProps[prop] : undefined, events);\n      }\n      // Note, the spirit of React might be to \"unset\" any old values that\n      // are no longer included; however, there's no reasonable value to set\n      // them to so we just leave the previous state as is.\n    }\n    /**\n     * Updates element properties correctly setting properties\n     * on mount.\n     */\n    componentDidMount() {\n      this._updateElement();\n    }\n    /**\n     * Updates element properties correctly setting properties\n     * on every update. Note, this does not include mount.\n     */\n    componentDidUpdate(old) {\n      this._updateElement(old);\n    }\n    /**\n     * Renders the custom element with a `ref` prop which allows this\n     * component to reference the custom element.\n     *\n     * Standard attributes are passed to React and element properties and events\n     * are updated in componentDidMount/componentDidUpdate.\n     *\n     */\n    render() {\n      var _a;\n      // Since refs only get fulfilled once, pass a new one if the user's\n      // ref changed. This allows refs to be fulfilled as expected, going from\n      // having a value to null.\n      const userRef = (_a = this.props.__forwardedRef) !== null && _a !== void 0 ? _a : null;\n      if (this._ref === undefined || this._userRef !== userRef) {\n        this._ref = value => {\n          if (this._element === null) {\n            this._element = value;\n          }\n          if (userRef !== null) {\n            setRef(userRef, value);\n          }\n          this._userRef = userRef;\n        };\n      }\n      // Filters class properties out and passes the remaining\n      // attributes to React. This allows attributes to use framework rules\n      // for setting attributes and render correctly under SSR.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const props = {\n        ref: this._ref\n      };\n      // Note, save element props while iterating to avoid the need to\n      // iterate again when setting properties.\n      this._elementProps = {};\n      for (const [k, v] of Object.entries(this.props)) {\n        if (k === '__forwardedRef') continue;\n        if (eventProps.has(k) || !reservedReactProperties.has(k) && !(k in HTMLElement.prototype) && k in elementClass.prototype) {\n          this._elementProps[k] = v;\n        } else {\n          // React does *not* handle `className` for custom elements so\n          // coerce it to `class` so it's handled correctly.\n          props[k === 'className' ? 'class' : k] = v;\n        }\n      }\n      return createElement(tagName, props);\n    }\n  }\n  ReactComponent.displayName = displayName !== null && displayName !== void 0 ? displayName : elementClass.name;\n  const ForwardedComponent = React.forwardRef((props, ref) => createElement(ReactComponent, {\n    ...props,\n    __forwardedRef: ref\n  }, props === null || props === void 0 ? void 0 : props.children));\n  // To ease debugging in the React Developer Tools\n  ForwardedComponent.displayName = ReactComponent.displayName;\n  return ForwardedComponent;\n};","map":{"version":3,"mappings":"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","names":["reservedReactProperties","Set","listenedEvents","WeakMap","addOrUpdateEventListener","node","event","listener","events","get","undefined","set","Map","handler","handleEvent","addEventListener","delete","removeEventListener","setProperty","name","value","old","setRef","ref","current","createComponent","React","tagName","elementClass","displayName","Component","createElement","eventProps","Object","keys","ReactComponent","constructor","_updateElement","oldProps","_element","prop","_elementProps","props","componentDidMount","componentDidUpdate","render","userRef","__forwardedRef","_ref","_userRef","k","v","entries","has","HTMLElement","prototype","ForwardedComponent","forwardRef","children"],"sources":["/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@lit-labs/react/src/create-component.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Match a prop name to a typed event callback by\n// adding an Event type as an expected property on a string.\nexport type EventName<T extends Event = Event> = string & {\n  __event_type: T;\n};\n\n// A key value map matching React prop names to event names\ntype EventNames = Record<string, EventName | string>;\n\n// A map of expected event listener types based on EventNames\ntype EventListeners<R extends EventNames> = {\n  [K in keyof R]: R[K] extends EventName\n    ? (e: R[K]['__event_type']) => void\n    : (e: Event) => void;\n};\n\ntype ReactProps<I, E> = Omit<React.HTMLAttributes<I>, keyof E>;\ntype ElementWithoutPropsOrEventListeners<I, E> = Omit<\n  I,\n  keyof E | keyof ReactProps<I, E>\n>;\n\n// Props the user is allowed to use, includes standard attributes, children,\n// ref, as well as special event and element properties.\ntype WebComponentProps<\n  I extends HTMLElement,\n  E extends EventNames = {}\n> = Partial<\n  ReactProps<I, E> &\n    ElementWithoutPropsOrEventListeners<I, E> &\n    EventListeners<E>\n>;\n\n// Props used by this component wrapper. This is the WebComponentProps and the\n// special `__forwardedRef` property. Note, this ref is special because\n// it's both needed in this component to get access to the rendered element\n// and must fulfill any ref passed by the user.\ntype ReactComponentProps<\n  I extends HTMLElement,\n  E extends EventNames = {}\n> = WebComponentProps<I, E> & {\n  __forwardedRef?: React.Ref<I>;\n};\n\nexport type ReactWebComponent<\n  I extends HTMLElement,\n  E extends EventNames = {}\n> = React.ForwardRefExoticComponent<\n  React.PropsWithoutRef<WebComponentProps<I, E>> & React.RefAttributes<I>\n>;\n\ntype Constructor<T> = {new (): T};\n\nconst reservedReactProperties = new Set([\n  'children',\n  'localName',\n  'ref',\n  'style',\n  'className',\n]);\n\nconst listenedEvents: WeakMap<\n  Element,\n  Map<string, EventListenerObject>\n> = new WeakMap();\n\n/**\n * Adds an event listener for the specified event to the given node. In the\n * React setup, there should only ever be one event listener. Thus, for\n * efficiency only one listener is added and the handler for that listener is\n * updated to point to the given listener function.\n */\nconst addOrUpdateEventListener = (\n  node: Element,\n  event: string,\n  listener: (event?: Event) => void\n) => {\n  let events = listenedEvents.get(node);\n  if (events === undefined) {\n    listenedEvents.set(node, (events = new Map()));\n  }\n  let handler = events.get(event);\n  if (listener !== undefined) {\n    // If necessary, add listener and track handler\n    if (handler === undefined) {\n      events.set(event, (handler = {handleEvent: listener}));\n      node.addEventListener(event, handler);\n      // Otherwise just update the listener with new value\n    } else {\n      handler.handleEvent = listener;\n    }\n    // Remove listener if one exists and value is undefined\n  } else if (handler !== undefined) {\n    events.delete(event);\n    node.removeEventListener(event, handler);\n  }\n};\n\n/**\n * Sets properties and events on custom elements. These properties and events\n * have been pre-filtered so we know they should apply to the custom element.\n */\nconst setProperty = <E extends Element>(\n  node: E,\n  name: string,\n  value: unknown,\n  old: unknown,\n  events?: EventNames\n) => {\n  const event = events?.[name];\n  if (event !== undefined) {\n    // Dirty check event value.\n    if (value !== old) {\n      addOrUpdateEventListener(node, event, value as (e?: Event) => void);\n    }\n  } else {\n    // But don't dirty check properties; elements are assumed to do this.\n    node[name as keyof E] = value as E[keyof E];\n  }\n};\n\n// Set a React ref. Note, there are 2 kinds of refs and there's no built in\n// React API to set a ref.\nconst setRef = (ref: React.Ref<unknown>, value: Element | null) => {\n  if (typeof ref === 'function') {\n    (ref as (e: Element | null) => void)(value);\n  } else {\n    (ref as {current: Element | null}).current = value;\n  }\n};\n\n/**\n * Creates a React component for a custom element. Properties are distinguished\n * from attributes automatically, and events can be configured so they are\n * added to the custom element as event listeners.\n *\n * @param React The React module, typically imported from the `react` npm\n * package.\n * @param tagName The custom element tag name registered via\n * `customElements.define`.\n * @param elementClass The custom element class registered via\n * `customElements.define`.\n * @param events An object listing events to which the component can listen. The\n * object keys are the event property names passed in via React props and the\n * object values are the names of the corresponding events generated by the\n * custom element. For example, given `{onactivate: 'activate'}` an event\n * function may be passed via the component's `onactivate` prop and will be\n * called when the custom element fires its `activate` event.\n * @param displayName A React component display name, used in debugging\n * messages. Default value is inferred from the name of custom element class\n * registered via `customElements.define`.\n */\nexport const createComponent = <\n  I extends HTMLElement,\n  E extends EventNames = {}\n>(\n  React: typeof window.React,\n  tagName: string,\n  elementClass: Constructor<I>,\n  events?: E,\n  displayName?: string\n): ReactWebComponent<I, E> => {\n  const Component = React.Component;\n  const createElement = React.createElement;\n  const eventProps = new Set(Object.keys(events ?? {}));\n\n  type Props = ReactComponentProps<I, E>;\n\n  class ReactComponent extends Component<Props> {\n    private _element: I | null = null;\n    private _elementProps!: {[index: string]: unknown};\n    private _userRef?: React.Ref<I>;\n    private _ref?: React.RefCallback<I>;\n\n    static displayName = displayName ?? elementClass.name;\n\n    private _updateElement(oldProps?: Props) {\n      if (this._element === null) {\n        return;\n      }\n      // Set element properties to the values in `this.props`\n      for (const prop in this._elementProps) {\n        setProperty(\n          this._element,\n          prop,\n          this.props[prop],\n          oldProps ? oldProps[prop] : undefined,\n          events\n        );\n      }\n      // Note, the spirit of React might be to \"unset\" any old values that\n      // are no longer included; however, there's no reasonable value to set\n      // them to so we just leave the previous state as is.\n    }\n\n    /**\n     * Updates element properties correctly setting properties\n     * on mount.\n     */\n    override componentDidMount() {\n      this._updateElement();\n    }\n\n    /**\n     * Updates element properties correctly setting properties\n     * on every update. Note, this does not include mount.\n     */\n    override componentDidUpdate(old: Props) {\n      this._updateElement(old);\n    }\n\n    /**\n     * Renders the custom element with a `ref` prop which allows this\n     * component to reference the custom element.\n     *\n     * Standard attributes are passed to React and element properties and events\n     * are updated in componentDidMount/componentDidUpdate.\n     *\n     */\n    override render() {\n      // Since refs only get fulfilled once, pass a new one if the user's\n      // ref changed. This allows refs to be fulfilled as expected, going from\n      // having a value to null.\n      const userRef = this.props.__forwardedRef ?? null;\n      if (this._ref === undefined || this._userRef !== userRef) {\n        this._ref = (value: I | null) => {\n          if (this._element === null) {\n            this._element = value;\n          }\n          if (userRef !== null) {\n            setRef(userRef, value);\n          }\n          this._userRef = userRef;\n        };\n      }\n      // Filters class properties out and passes the remaining\n      // attributes to React. This allows attributes to use framework rules\n      // for setting attributes and render correctly under SSR.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const props: any = {ref: this._ref};\n      // Note, save element props while iterating to avoid the need to\n      // iterate again when setting properties.\n      this._elementProps = {};\n      for (const [k, v] of Object.entries(this.props)) {\n        if (k === '__forwardedRef') continue;\n\n        if (\n          eventProps.has(k) ||\n          (!reservedReactProperties.has(k) &&\n            !(k in HTMLElement.prototype) &&\n            k in elementClass.prototype)\n        ) {\n          this._elementProps[k] = v;\n        } else {\n          // React does *not* handle `className` for custom elements so\n          // coerce it to `class` so it's handled correctly.\n          props[k === 'className' ? 'class' : k] = v;\n        }\n      }\n      return createElement<React.HTMLAttributes<I>, I>(tagName, props);\n    }\n  }\n\n  const ForwardedComponent: ReactWebComponent<I, E> = React.forwardRef<\n    I,\n    WebComponentProps<I, E>\n  >((props, ref) =>\n    createElement<Props, ReactComponent, typeof ReactComponent>(\n      ReactComponent,\n      {...props, __forwardedRef: ref},\n      props?.children\n    )\n  );\n\n  // To ease debugging in the React Developer Tools\n  ForwardedComponent.displayName = ReactComponent.displayName;\n\n  return ForwardedComponent;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}