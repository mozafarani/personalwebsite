{"ast":null,"code":"import React, { useState, useCallback } from 'react';\nimport Spinner from '../../Spinner.js';\nimport { ActionList } from '../../ActionList/index.js';\nimport Box from '../../Box.js';\nimport { useCombobox } from '../hooks/useCombobox.js';\nimport Overlay from '../../Overlay.js';\nimport { getSuggestionValue, getSuggestionKey } from './utils.js';\nconst LoadingIndicator = () => /*#__PURE__*/React.createElement(Box, {\n  sx: {\n    display: 'flex',\n    justifyContent: 'center',\n    py: 2\n  }\n}, /*#__PURE__*/React.createElement(Spinner, {\n  size: \"small\"\n}));\nLoadingIndicator.displayName = \"LoadingIndicator\";\nconst SuggestionListItem = _ref => {\n  let {\n    suggestion\n  } = _ref;\n  const value = getSuggestionValue(suggestion);\n  const sharedProps = {\n    id: value,\n    children: value,\n    role: 'option',\n    sx: {\n      '&[aria-selected]': {\n        backgroundColor: 'actionListItem.default.activeBg'\n      },\n      '&[data-combobox-option-default]:not([aria-selected])': {\n        backgroundColor: 'actionListItem.default.selectedBg'\n      }\n    }\n  };\n  return typeof suggestion === 'string' ? /*#__PURE__*/React.createElement(ActionList.Item, sharedProps) : suggestion.render(sharedProps);\n};\n\n/**\n * Renders an overlayed list at the given relative coordinates. Handles keyboard navigation\n * and accessibility concerns.\n */\nconst AutocompleteSuggestions = _ref2 => {\n  let {\n    suggestions,\n    portalName,\n    top,\n    left,\n    onClose,\n    onCommit: externalOnCommit,\n    inputRef,\n    visible,\n    tabInsertsSuggestions\n  } = _ref2;\n  // It seems wierd to use state instead of a ref here, but because the list is inside an\n  // AnchoredOverlay it is not always mounted - so we want to reinitialize the Combobox when it mounts\n  const [list, setList] = useState(null);\n  const onCommit = useCallback(_ref3 => {\n    let {\n      option\n    } = _ref3;\n    externalOnCommit(getSuggestionValue(option));\n  }, [externalOnCommit]);\n\n  // Setup keyboard navigation\n  useCombobox({\n    // Even though the list is visible when loading, we don't want to do keyboard binding in that case\n    isOpen: visible && suggestions !== 'loading',\n    listElement: list,\n    inputElement: inputRef.current,\n    onCommit,\n    options: Array.isArray(suggestions) ? suggestions : [],\n    tabInsertsSuggestions,\n    defaultFirstOption: true\n  });\n\n  // Conditional rendering appears wrong at first - it means that we are reconstructing the\n  // Combobox instance every time the suggestions appear. But this is what we want - otherwise\n  // the textarea would always have the `combobox` role, which is incorrect (a textarea should\n  // not technically ever be a combobox). We compromise by dynamically applying the combobox\n  // role only when suggestions are available.\n  return visible ? /*#__PURE__*/React.createElement(Overlay, {\n    onEscape: onClose,\n    onClickOutside: onClose,\n    returnFocusRef: inputRef,\n    preventFocusOnOpen: true,\n    portalContainerName: portalName,\n    sx: {\n      position: 'fixed'\n    },\n    top,\n    left\n  }, /*#__PURE__*/React.createElement(ActionList, {\n    ref: setList\n  }, suggestions === 'loading' ? /*#__PURE__*/React.createElement(LoadingIndicator, null) : suggestions === null || suggestions === void 0 ? void 0 : suggestions.map(suggestion => /*#__PURE__*/React.createElement(SuggestionListItem, {\n    suggestion: suggestion,\n    key: getSuggestionKey(suggestion)\n  })))) : /*#__PURE__*/React.createElement(React.Fragment, null);\n};\nAutocompleteSuggestions.displayName = 'SuggestionList';\nvar AutocompleteSuggestions$1 = AutocompleteSuggestions;\nexport { AutocompleteSuggestions$1 as default };","map":{"version":3,"names":["React","useState","useCallback","Spinner","ActionList","Box","useCombobox","Overlay","getSuggestionValue","getSuggestionKey","LoadingIndicator","createElement","sx","display","justifyContent","py","size","displayName","SuggestionListItem","suggestion","value","sharedProps","id","children","role","backgroundColor","Item","render","AutocompleteSuggestions","suggestions","portalName","top","left","onClose","onCommit","externalOnCommit","inputRef","visible","tabInsertsSuggestions","list","setList","option","isOpen","listElement","inputElement","current","options","Array","isArray","defaultFirstOption","onEscape","onClickOutside","returnFocusRef","preventFocusOnOpen","portalContainerName","position","ref","map","key","Fragment","AutocompleteSuggestions$1","default"],"sources":["/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@primer/react/lib-esm/drafts/InlineAutocomplete/_AutocompleteSuggestions.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport Spinner from '../../Spinner.js';\nimport { ActionList } from '../../ActionList/index.js';\nimport Box from '../../Box.js';\nimport { useCombobox } from '../hooks/useCombobox.js';\nimport Overlay from '../../Overlay.js';\nimport { getSuggestionValue, getSuggestionKey } from './utils.js';\n\nconst LoadingIndicator = () => /*#__PURE__*/React.createElement(Box, {\n  sx: {\n    display: 'flex',\n    justifyContent: 'center',\n    py: 2\n  }\n}, /*#__PURE__*/React.createElement(Spinner, {\n  size: \"small\"\n}));\nLoadingIndicator.displayName = \"LoadingIndicator\";\nconst SuggestionListItem = ({\n  suggestion\n}) => {\n  const value = getSuggestionValue(suggestion);\n  const sharedProps = {\n    id: value,\n    children: value,\n    role: 'option',\n    sx: {\n      '&[aria-selected]': {\n        backgroundColor: 'actionListItem.default.activeBg'\n      },\n      '&[data-combobox-option-default]:not([aria-selected])': {\n        backgroundColor: 'actionListItem.default.selectedBg'\n      }\n    }\n  };\n  return typeof suggestion === 'string' ? /*#__PURE__*/React.createElement(ActionList.Item, sharedProps) : suggestion.render(sharedProps);\n};\n\n/**\n * Renders an overlayed list at the given relative coordinates. Handles keyboard navigation\n * and accessibility concerns.\n */\nconst AutocompleteSuggestions = ({\n  suggestions,\n  portalName,\n  top,\n  left,\n  onClose,\n  onCommit: externalOnCommit,\n  inputRef,\n  visible,\n  tabInsertsSuggestions\n}) => {\n  // It seems wierd to use state instead of a ref here, but because the list is inside an\n  // AnchoredOverlay it is not always mounted - so we want to reinitialize the Combobox when it mounts\n  const [list, setList] = useState(null);\n  const onCommit = useCallback(({\n    option\n  }) => {\n    externalOnCommit(getSuggestionValue(option));\n  }, [externalOnCommit]);\n\n  // Setup keyboard navigation\n  useCombobox({\n    // Even though the list is visible when loading, we don't want to do keyboard binding in that case\n    isOpen: visible && suggestions !== 'loading',\n    listElement: list,\n    inputElement: inputRef.current,\n    onCommit,\n    options: Array.isArray(suggestions) ? suggestions : [],\n    tabInsertsSuggestions,\n    defaultFirstOption: true\n  });\n\n  // Conditional rendering appears wrong at first - it means that we are reconstructing the\n  // Combobox instance every time the suggestions appear. But this is what we want - otherwise\n  // the textarea would always have the `combobox` role, which is incorrect (a textarea should\n  // not technically ever be a combobox). We compromise by dynamically applying the combobox\n  // role only when suggestions are available.\n  return visible ? /*#__PURE__*/React.createElement(Overlay, {\n    onEscape: onClose,\n    onClickOutside: onClose,\n    returnFocusRef: inputRef,\n    preventFocusOnOpen: true,\n    portalContainerName: portalName,\n    sx: {\n      position: 'fixed'\n    },\n    top,\n    left\n  }, /*#__PURE__*/React.createElement(ActionList, {\n    ref: setList\n  }, suggestions === 'loading' ? /*#__PURE__*/React.createElement(LoadingIndicator, null) : suggestions === null || suggestions === void 0 ? void 0 : suggestions.map(suggestion => /*#__PURE__*/React.createElement(SuggestionListItem, {\n    suggestion: suggestion,\n    key: getSuggestionKey(suggestion)\n  })))) : /*#__PURE__*/React.createElement(React.Fragment, null);\n};\nAutocompleteSuggestions.displayName = 'SuggestionList';\nvar AutocompleteSuggestions$1 = AutocompleteSuggestions;\n\nexport { AutocompleteSuggestions$1 as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}