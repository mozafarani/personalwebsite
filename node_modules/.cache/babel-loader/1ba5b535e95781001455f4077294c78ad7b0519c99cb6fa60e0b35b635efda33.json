{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { useProvidedStateOrCreate } from '../hooks/useProvidedStateOrCreate.js';\nimport { useProvidedRefOrCreate } from '../hooks/useProvidedRefOrCreate.js';\nimport { AnchoredOverlay } from '../AnchoredOverlay/AnchoredOverlay.js';\nimport { FilteredActionList } from '../FilteredActionList/FilteredActionList.js';\nimport { DropdownButton } from '../deprecated/DropdownMenu/DropdownButton.js';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction isMultiSelectVariant(selected) {\n  return Array.isArray(selected);\n}\nconst focusZoneSettings = {\n  // Let FilteredActionList handle focus zone\n  disabled: true\n};\nfunction SelectPanel(_ref) {\n  let {\n    open,\n    onOpenChange,\n    renderAnchor = props => /*#__PURE__*/React.createElement(DropdownButton, props),\n    anchorRef: externalAnchorRef,\n    placeholder,\n    selected,\n    onSelectedChange,\n    filterValue: externalFilterValue,\n    onFilterChange: externalOnFilterChange,\n    items,\n    textInputProps,\n    overlayProps,\n    sx,\n    ...listProps\n  } = _ref;\n  const [filterValue, setInternalFilterValue] = useProvidedStateOrCreate(externalFilterValue, undefined, '');\n  const onFilterChange = useCallback((value, e) => {\n    externalOnFilterChange(value, e);\n    setInternalFilterValue(value);\n  }, [externalOnFilterChange, setInternalFilterValue]);\n  const anchorRef = useProvidedRefOrCreate(externalAnchorRef);\n  const onOpen = useCallback(gesture => onOpenChange(true, gesture), [onOpenChange]);\n  const onClose = useCallback(gesture => {\n    onOpenChange(false, gesture);\n  }, [onOpenChange]);\n  const renderMenuAnchor = useMemo(() => {\n    if (renderAnchor === null) {\n      return null;\n    }\n    const selectedItems = Array.isArray(selected) ? selected : [...(selected ? [selected] : [])];\n    return props => {\n      return renderAnchor({\n        ...props,\n        children: selectedItems.length ? selectedItems.map(item => item.text).join(', ') : placeholder\n      });\n    };\n  }, [placeholder, renderAnchor, selected]);\n  const itemsToRender = useMemo(() => {\n    return items.map(item => {\n      const isItemSelected = isMultiSelectVariant(selected) ? selected.includes(item) : selected === item;\n      return {\n        ...item,\n        role: 'option',\n        selected: 'selected' in item && item.selected === undefined ? undefined : isItemSelected,\n        onAction: (itemFromAction, event) => {\n          var _item$onAction;\n          (_item$onAction = item.onAction) === null || _item$onAction === void 0 ? void 0 : _item$onAction.call(item, itemFromAction, event);\n          if (event.defaultPrevented) {\n            return;\n          }\n          if (isMultiSelectVariant(selected)) {\n            const otherSelectedItems = selected.filter(selectedItem => selectedItem !== item);\n            const newSelectedItems = selected.includes(item) ? otherSelectedItems : [...otherSelectedItems, item];\n            const multiSelectOnChange = onSelectedChange;\n            multiSelectOnChange(newSelectedItems);\n            return;\n          }\n\n          // single select\n          const singleSelectOnChange = onSelectedChange;\n          singleSelectOnChange(item === selected ? undefined : item);\n          onClose('selection');\n        }\n      };\n    });\n  }, [onClose, onSelectedChange, items, selected]);\n  const inputRef = React.useRef(null);\n  const focusTrapSettings = {\n    initialFocusRef: inputRef\n  };\n  const extendedTextInputProps = useMemo(() => {\n    return {\n      sx: {\n        m: 2\n      },\n      contrast: true,\n      ...textInputProps\n    };\n  }, [textInputProps]);\n  return /*#__PURE__*/React.createElement(AnchoredOverlay, {\n    renderAnchor: renderMenuAnchor,\n    anchorRef: anchorRef,\n    open: open,\n    onOpen: onOpen,\n    onClose: onClose,\n    overlayProps: overlayProps,\n    focusTrapSettings: focusTrapSettings,\n    focusZoneSettings: focusZoneSettings\n  }, /*#__PURE__*/React.createElement(FilteredActionList, _extends({\n    filterValue: filterValue,\n    onFilterChange: onFilterChange\n  }, listProps, {\n    role: \"listbox\",\n    \"aria-multiselectable\": isMultiSelectVariant(selected) ? 'true' : 'false',\n    selectionVariant: isMultiSelectVariant(selected) ? 'multiple' : 'single',\n    items: itemsToRender,\n    textInputProps: extendedTextInputProps,\n    inputRef: inputRef\n    // inheriting height and maxHeight ensures that the FilteredActionList is never taller\n    // than the Overlay (which would break scrolling the items)\n    ,\n\n    sx: {\n      ...sx,\n      height: 'inherit',\n      maxHeight: 'inherit'\n    }\n  })));\n}\nSelectPanel.displayName = \"SelectPanel\";\nSelectPanel.displayName = 'SelectPanel';\nexport { SelectPanel };","map":{"version":3,"names":["React","useCallback","useMemo","useProvidedStateOrCreate","useProvidedRefOrCreate","AnchoredOverlay","FilteredActionList","DropdownButton","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","isMultiSelectVariant","selected","Array","isArray","focusZoneSettings","disabled","SelectPanel","open","onOpenChange","renderAnchor","props","createElement","anchorRef","externalAnchorRef","placeholder","onSelectedChange","filterValue","externalFilterValue","onFilterChange","externalOnFilterChange","items","textInputProps","overlayProps","sx","listProps","setInternalFilterValue","undefined","value","e","onOpen","gesture","onClose","renderMenuAnchor","selectedItems","children","map","item","text","join","itemsToRender","isItemSelected","includes","role","onAction","itemFromAction","event","_item$onAction","defaultPrevented","otherSelectedItems","filter","selectedItem","newSelectedItems","multiSelectOnChange","singleSelectOnChange","inputRef","useRef","focusTrapSettings","initialFocusRef","extendedTextInputProps","m","contrast","selectionVariant","height","maxHeight","displayName"],"sources":["/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@primer/react/lib-esm/SelectPanel/SelectPanel.js"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { useProvidedStateOrCreate } from '../hooks/useProvidedStateOrCreate.js';\nimport { useProvidedRefOrCreate } from '../hooks/useProvidedRefOrCreate.js';\nimport { AnchoredOverlay } from '../AnchoredOverlay/AnchoredOverlay.js';\nimport { FilteredActionList } from '../FilteredActionList/FilteredActionList.js';\nimport { DropdownButton } from '../deprecated/DropdownMenu/DropdownButton.js';\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction isMultiSelectVariant(selected) {\n  return Array.isArray(selected);\n}\nconst focusZoneSettings = {\n  // Let FilteredActionList handle focus zone\n  disabled: true\n};\nfunction SelectPanel({\n  open,\n  onOpenChange,\n  renderAnchor = props => /*#__PURE__*/React.createElement(DropdownButton, props),\n  anchorRef: externalAnchorRef,\n  placeholder,\n  selected,\n  onSelectedChange,\n  filterValue: externalFilterValue,\n  onFilterChange: externalOnFilterChange,\n  items,\n  textInputProps,\n  overlayProps,\n  sx,\n  ...listProps\n}) {\n  const [filterValue, setInternalFilterValue] = useProvidedStateOrCreate(externalFilterValue, undefined, '');\n  const onFilterChange = useCallback((value, e) => {\n    externalOnFilterChange(value, e);\n    setInternalFilterValue(value);\n  }, [externalOnFilterChange, setInternalFilterValue]);\n  const anchorRef = useProvidedRefOrCreate(externalAnchorRef);\n  const onOpen = useCallback(gesture => onOpenChange(true, gesture), [onOpenChange]);\n  const onClose = useCallback(gesture => {\n    onOpenChange(false, gesture);\n  }, [onOpenChange]);\n  const renderMenuAnchor = useMemo(() => {\n    if (renderAnchor === null) {\n      return null;\n    }\n    const selectedItems = Array.isArray(selected) ? selected : [...(selected ? [selected] : [])];\n    return props => {\n      return renderAnchor({\n        ...props,\n        children: selectedItems.length ? selectedItems.map(item => item.text).join(', ') : placeholder\n      });\n    };\n  }, [placeholder, renderAnchor, selected]);\n  const itemsToRender = useMemo(() => {\n    return items.map(item => {\n      const isItemSelected = isMultiSelectVariant(selected) ? selected.includes(item) : selected === item;\n      return {\n        ...item,\n        role: 'option',\n        selected: 'selected' in item && item.selected === undefined ? undefined : isItemSelected,\n        onAction: (itemFromAction, event) => {\n          var _item$onAction;\n          (_item$onAction = item.onAction) === null || _item$onAction === void 0 ? void 0 : _item$onAction.call(item, itemFromAction, event);\n          if (event.defaultPrevented) {\n            return;\n          }\n          if (isMultiSelectVariant(selected)) {\n            const otherSelectedItems = selected.filter(selectedItem => selectedItem !== item);\n            const newSelectedItems = selected.includes(item) ? otherSelectedItems : [...otherSelectedItems, item];\n            const multiSelectOnChange = onSelectedChange;\n            multiSelectOnChange(newSelectedItems);\n            return;\n          }\n\n          // single select\n          const singleSelectOnChange = onSelectedChange;\n          singleSelectOnChange(item === selected ? undefined : item);\n          onClose('selection');\n        }\n      };\n    });\n  }, [onClose, onSelectedChange, items, selected]);\n  const inputRef = React.useRef(null);\n  const focusTrapSettings = {\n    initialFocusRef: inputRef\n  };\n  const extendedTextInputProps = useMemo(() => {\n    return {\n      sx: {\n        m: 2\n      },\n      contrast: true,\n      ...textInputProps\n    };\n  }, [textInputProps]);\n  return /*#__PURE__*/React.createElement(AnchoredOverlay, {\n    renderAnchor: renderMenuAnchor,\n    anchorRef: anchorRef,\n    open: open,\n    onOpen: onOpen,\n    onClose: onClose,\n    overlayProps: overlayProps,\n    focusTrapSettings: focusTrapSettings,\n    focusZoneSettings: focusZoneSettings\n  }, /*#__PURE__*/React.createElement(FilteredActionList, _extends({\n    filterValue: filterValue,\n    onFilterChange: onFilterChange\n  }, listProps, {\n    role: \"listbox\",\n    \"aria-multiselectable\": isMultiSelectVariant(selected) ? 'true' : 'false',\n    selectionVariant: isMultiSelectVariant(selected) ? 'multiple' : 'single',\n    items: itemsToRender,\n    textInputProps: extendedTextInputProps,\n    inputRef: inputRef\n    // inheriting height and maxHeight ensures that the FilteredActionList is never taller\n    // than the Overlay (which would break scrolling the items)\n    ,\n    sx: {\n      ...sx,\n      height: 'inherit',\n      maxHeight: 'inherit'\n    }\n  })));\n}\nSelectPanel.displayName = \"SelectPanel\";\nSelectPanel.displayName = 'SelectPanel';\n\nexport { SelectPanel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}