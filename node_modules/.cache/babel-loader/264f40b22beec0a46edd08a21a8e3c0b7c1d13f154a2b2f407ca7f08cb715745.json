{"ast":null,"code":"import _slicedToArray from \"/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useCallback } from 'react';\n\n/**\n * There are some situations where we want to give users the option to control state externally with their own state handlers\n * or default to using internal state handlers. Because of the 'rules-of-hooks', we cannot conditionally make a call to `React.useState`\n * only in the situations where the state is not provided as a prop.\n * This hook aims to encapsulate that logic, so the consumer doesn't need to be concerned with violating `rules-of-hooks`.\n * @param externalState The state to use - if undefined, will use the state from a call to React.useState\n * @param setExternalState The setState to use - if undefined, will use the setState from a call to React.useState\n * @param defaultState The defaultState to use, if using internal state.\n */\nfunction useProvidedStateOrCreate(externalState, setExternalState, defaultState) {\n  var _useState = useState(defaultState),\n    _useState2 = _slicedToArray(_useState, 2),\n    internalState = _useState2[0],\n    setInternalState = _useState2[1];\n  var state = externalState !== null && externalState !== void 0 ? externalState : internalState;\n  var setState = useCallback(function (s) {\n    setInternalState(s);\n    if (setExternalState) setExternalState(s);\n  }, [setExternalState]);\n  return [state, setState];\n}\nexport { useProvidedStateOrCreate };","map":{"version":3,"names":["useState","useCallback","useProvidedStateOrCreate","externalState","setExternalState","defaultState","internalState","setInternalState","state","setState","s"],"sources":["/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@primer/react/lib-esm/hooks/useProvidedStateOrCreate.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\n/**\n * There are some situations where we want to give users the option to control state externally with their own state handlers\n * or default to using internal state handlers. Because of the 'rules-of-hooks', we cannot conditionally make a call to `React.useState`\n * only in the situations where the state is not provided as a prop.\n * This hook aims to encapsulate that logic, so the consumer doesn't need to be concerned with violating `rules-of-hooks`.\n * @param externalState The state to use - if undefined, will use the state from a call to React.useState\n * @param setExternalState The setState to use - if undefined, will use the setState from a call to React.useState\n * @param defaultState The defaultState to use, if using internal state.\n */\nfunction useProvidedStateOrCreate(externalState, setExternalState, defaultState) {\n  const [internalState, setInternalState] = useState(defaultState);\n  const state = externalState !== null && externalState !== void 0 ? externalState : internalState;\n  const setState = useCallback(s => {\n    setInternalState(s);\n    if (setExternalState) setExternalState(s);\n  }, [setExternalState]);\n  return [state, setState];\n}\n\nexport { useProvidedStateOrCreate };\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwB,CAACC,aAAa,EAAEC,gBAAgB,EAAEC,YAAY,EAAE;EAC/E,gBAA0CL,QAAQ,CAACK,YAAY,CAAC;IAAA;IAAzDC,aAAa;IAAEC,gBAAgB;EACtC,IAAMC,KAAK,GAAGL,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAGA,aAAa,GAAGG,aAAa;EAChG,IAAMG,QAAQ,GAAGR,WAAW,CAAC,UAAAS,CAAC,EAAI;IAChCH,gBAAgB,CAACG,CAAC,CAAC;IACnB,IAAIN,gBAAgB,EAAEA,gBAAgB,CAACM,CAAC,CAAC;EAC3C,CAAC,EAAE,CAACN,gBAAgB,CAAC,CAAC;EACtB,OAAO,CAACI,KAAK,EAAEC,QAAQ,CAAC;AAC1B;AAEA,SAASP,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}