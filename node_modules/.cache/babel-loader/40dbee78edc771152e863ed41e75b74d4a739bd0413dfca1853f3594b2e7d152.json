{"ast":null,"code":"import _slicedToArray from \"/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createClass from \"/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nfunction t(t, n, r) {\n  return Math.min(Math.max(t, r), n);\n}\nvar n = /*#__PURE__*/function (_Error) {\n  _inherits(n, _Error);\n  var _super = _createSuper(n);\n  function n(t) {\n    _classCallCheck(this, n);\n    return _super.call(this, \"Failed to parse color: \\\"\".concat(t, \"\\\"\"));\n  }\n  return _createClass(n);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nfunction r(r) {\n  if (\"string\" != typeof r) throw new n(r);\n  if (\"transparent\" === r.trim().toLowerCase()) return [0, 0, 0, 0];\n  var e = r.trim();\n  e = u.test(r) ? function (t) {\n    var r = t.toLowerCase().trim(),\n      e = o[function (t) {\n        var n = 5381,\n          r = t.length;\n        for (; r;) n = 33 * n ^ t.charCodeAt(--r);\n        return (n >>> 0) % 2341;\n      }(r)];\n    if (!e) throw new n(t);\n    return \"#\".concat(e);\n  }(r) : r;\n  var f = s.exec(e);\n  if (f) {\n    var _t = Array.from(f).slice(1);\n    return [].concat(_toConsumableArray(_t.slice(0, 3).map(function (t) {\n      return parseInt(_(t, 2), 16);\n    })), [parseInt(_(_t[3] || \"f\", 2), 16) / 255]);\n  }\n  var p = i.exec(e);\n  if (p) {\n    var _t2 = Array.from(p).slice(1);\n    return [].concat(_toConsumableArray(_t2.slice(0, 3).map(function (t) {\n      return parseInt(t, 16);\n    })), [parseInt(_t2[3] || \"ff\", 16) / 255]);\n  }\n  var z = a.exec(e);\n  if (z) {\n    var _t3 = Array.from(z).slice(1);\n    return [].concat(_toConsumableArray(_t3.slice(0, 3).map(function (t) {\n      return parseInt(t, 10);\n    })), [parseFloat(_t3[3] || \"1\")]);\n  }\n  var h = c.exec(e);\n  if (h) {\n    var _Array$from$slice$map = Array.from(h).slice(1).map(parseFloat),\n      _Array$from$slice$map2 = _slicedToArray(_Array$from$slice$map, 4),\n      _e = _Array$from$slice$map2[0],\n      _o = _Array$from$slice$map2[1],\n      _2 = _Array$from$slice$map2[2],\n      _s = _Array$from$slice$map2[3];\n    if (t(0, 100, _o) !== _o) throw new n(r);\n    if (t(0, 100, _2) !== _2) throw new n(r);\n    return [].concat(_toConsumableArray(l(_e, _o, _2)), [_s || 1]);\n  }\n  throw new n(r);\n}\nvar e = function e(t) {\n    return parseInt(t.replace(/_/g, \"\"), 36);\n  },\n  o = \"1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm\".split(\" \").reduce(function (t, n) {\n    var r = e(n.substring(0, 3)),\n      o = e(n.substring(3)).toString(16);\n    var _ = \"\";\n    for (var _t4 = 0; _t4 < 6 - o.length; _t4++) _ += \"0\";\n    return t[r] = \"\".concat(_).concat(o), t;\n  }, {}),\n  _ = function _(t, n) {\n    return Array.from(Array(n)).map(function () {\n      return t;\n    }).join(\"\");\n  },\n  s = new RegExp(\"^#\".concat(_(\"([a-f0-9])\", 3), \"([a-f0-9])?$\"), \"i\"),\n  i = new RegExp(\"^#\".concat(_(\"([a-f0-9]{2})\", 3), \"([a-f0-9]{2})?$\"), \"i\"),\n  a = new RegExp(\"^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*\".concat(_(\",\\\\s*(\\\\d+)\\\\s*\", 2), \"(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$\"), \"i\"),\n  c = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i,\n  u = /^[a-z]+$/i,\n  f = function f(t) {\n    return Math.round(255 * t);\n  },\n  l = function l(t, n, r) {\n    var e = r / 100;\n    if (0 === n) return [e, e, e].map(f);\n    var o = (t % 360 + 360) % 360 / 60,\n      _ = (1 - Math.abs(2 * e - 1)) * (n / 100),\n      s = _ * (1 - Math.abs(o % 2 - 1));\n    var i = 0,\n      a = 0,\n      c = 0;\n    o >= 0 && o < 1 ? (i = _, a = s) : o >= 1 && o < 2 ? (i = s, a = _) : o >= 2 && o < 3 ? (a = _, c = s) : o >= 3 && o < 4 ? (a = s, c = _) : o >= 4 && o < 5 ? (i = s, c = _) : o >= 5 && o < 6 && (i = _, c = s);\n    var u = e - _ / 2;\n    return [i + u, a + u, c + u].map(f);\n  };\nfunction p(t) {\n  var _r$map = r(t).map(function (t, n) {\n      return 3 === n ? t : t / 255;\n    }),\n    _r$map2 = _slicedToArray(_r$map, 4),\n    n = _r$map2[0],\n    e = _r$map2[1],\n    o = _r$map2[2],\n    _ = _r$map2[3],\n    s = Math.max(n, e, o),\n    i = Math.min(n, e, o),\n    a = (s + i) / 2;\n  if (s === i) return [0, 0, a, _];\n  var c = s - i;\n  return [60 * (n === s ? (e - o) / c + (e < o ? 6 : 0) : e === s ? (o - n) / c + 2 : (n - e) / c + 4), a > .5 ? c / (2 - s - i) : c / (s + i), a, _];\n}\nfunction z(n, r, e, o) {\n  return \"hsla(\".concat((n % 360).toFixed(), \", \").concat(t(0, 100, 100 * r).toFixed(), \"%, \").concat(t(0, 100, 100 * e).toFixed(), \"%, \").concat(parseFloat(t(0, 1, o).toFixed(3)), \")\");\n}\nfunction h(t, n) {\n  var _p = p(t),\n    _p2 = _slicedToArray(_p, 4),\n    r = _p2[0],\n    e = _p2[1],\n    o = _p2[2],\n    _ = _p2[3];\n  return z(r + n, e, o, _);\n}\nfunction d(t, n) {\n  var _p3 = p(t),\n    _p4 = _slicedToArray(_p3, 4),\n    r = _p4[0],\n    e = _p4[1],\n    o = _p4[2],\n    _ = _p4[3];\n  return z(r, e, o - n, _);\n}\nfunction g(t, n) {\n  var _p5 = p(t),\n    _p6 = _slicedToArray(_p5, 4),\n    r = _p6[0],\n    e = _p6[1],\n    o = _p6[2],\n    _ = _p6[3];\n  return z(r, e - n, o, _);\n}\nfunction w(t) {\n  if (\"transparent\" === t) return 0;\n  function n(t) {\n    var n = t / 255;\n    return n <= .03928 ? n / 12.92 : Math.pow((n + .055) / 1.055, 2.4);\n  }\n  var _r = r(t),\n    _r2 = _slicedToArray(_r, 3),\n    e = _r2[0],\n    o = _r2[1],\n    _ = _r2[2];\n  return .2126 * n(e) + .7152 * n(o) + .0722 * n(_);\n}\nfunction x(t, n) {\n  var r = w(t),\n    e = w(n);\n  return r > e ? (r + .05) / (e + .05) : (e + .05) / (r + .05);\n}\nfunction m(n, r, e, o) {\n  return \"rgba(\".concat(t(0, 255, n).toFixed(), \", \").concat(t(0, 255, r).toFixed(), \", \").concat(t(0, 255, e).toFixed(), \", \").concat(parseFloat(t(0, 1, o).toFixed(3)), \")\");\n}\nfunction y(t, n, e) {\n  var o = function o(t, n) {\n      return 3 === n ? t : t / 255;\n    },\n    _r$map3 = r(t).map(o),\n    _r$map4 = _slicedToArray(_r$map3, 4),\n    _ = _r$map4[0],\n    s = _r$map4[1],\n    i = _r$map4[2],\n    a = _r$map4[3],\n    _r$map5 = r(n).map(o),\n    _r$map6 = _slicedToArray(_r$map5, 4),\n    c = _r$map6[0],\n    u = _r$map6[1],\n    f = _r$map6[2],\n    l = _r$map6[3],\n    p = l - a,\n    z = 2 * e - 1,\n    h = ((z * p == -1 ? z : z + p / (1 + z * p)) + 1) / 2,\n    d = 1 - h;\n  return m(255 * (_ * d + c * h), 255 * (s * d + u * h), 255 * (i * d + f * h), l * e + a * (1 - e));\n}\nfunction b() {\n  var n = [].slice.call(arguments);\n  return function (r) {\n    var e = n.length - 1,\n      o = t(0, e, Math.floor(r * e)),\n      _ = t(0, e, Math.ceil(r * e)),\n      s = 1 / e;\n    return y(n[o], n[_], (r - s * o) / s);\n  };\n}\nvar k = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7\n};\nfunction j(t) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"aa\";\n  return x(t, \"#fff\") < k[n];\n}\nfunction $(t, n) {\n  return d(t, -n);\n}\nfunction v(t, n) {\n  var _r3 = r(t),\n    _r4 = _slicedToArray(_r3, 4),\n    e = _r4[0],\n    o = _r4[1],\n    _ = _r4[2],\n    s = _r4[3];\n  return m(e, o, _, s - n);\n}\nfunction q(t, n) {\n  return v(t, -n);\n}\nfunction F(t) {\n  return w(t) > .179;\n}\nfunction M(t) {\n  return F(t) ? \"#000\" : \"#fff\";\n}\nfunction A(t, n) {\n  return g(t, -n);\n}\nfunction I(n) {\n  var _r5 = r(n),\n    _r6 = _slicedToArray(_r5, 4),\n    e = _r6[0],\n    o = _r6[1],\n    _ = _r6[2],\n    s = _r6[3];\n  var i = function i(n) {\n    var r = t(0, 255, n).toString(16);\n    return 1 === r.length ? \"0\".concat(r) : r;\n  };\n  return \"#\".concat(i(e)).concat(i(o)).concat(i(_)).concat(s < 1 ? i(Math.round(255 * s)) : \"\");\n}\nfunction E(t) {\n  return m.apply(void 0, _toConsumableArray(r(t)));\n}\nfunction C(t) {\n  return z.apply(void 0, _toConsumableArray(p(t)));\n}\nexport { n as ColorError, h as adjustHue, d as darken, g as desaturate, x as getContrast, w as getLuminance, b as getScale, t as guard, j as hasBadContrast, z as hsla, $ as lighten, y as mix, q as opacify, p as parseToHsla, r as parseToRgba, M as readableColor, F as readableColorIsBlack, m as rgba, A as saturate, I as toHex, C as toHsla, E as toRgba, v as transparentize };","map":{"version":3,"mappings":"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","names":["guard","low","high","value","Math","min","max","ColorError","constructor","color","Error","parseToRgba","trim","toLowerCase","normalizedColor","namedColorRegex","test","normalizedColorName","result","compressedColorMap","str","hash","i","length","charCodeAt","nameToHex","reducedHexMatch","reducedHexRegex","exec","arr","Array","from","slice","map","x","parseInt","r","hexMatch","hexRegex","rgbaMatch","rgbaRegex","parseFloat","hslaMatch","hslaRegex","h","s","l","a","hslToRgb","colorToInt","replace","split","reduce","acc","next","key","substring","hex","toString","prefix","amount","join","RegExp","roundColor","round","hue","saturation","lightness","huePrime","chroma","abs","secondComponent","red","green","blue","lightnessModification","parseToHsla","index","alpha","delta","hsla","toFixed","adjustHue","degrees","darken","desaturate","getLuminance","f","channel","pow","g","b","getContrast","color1","color2","luminance1","luminance2","rgba","mix","weight","normalize","n","r1","g1","b1","a1","r2","g2","b2","a2","alphaDelta","normalizedWeight","weight2","weight1","getScale","colors","lastIndex","lowIndex","floor","highIndex","ceil","unit","guidelines","decorative","readable","aa","aaa","hasBadContrast","standard","lighten","transparentize","opacify","readableColorIsBlack","readableColor","saturate","toHex","toRgba","toHsla"],"sources":["/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/guard.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/ColorError.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/parseToRgba.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/parseToHsla.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/hsla.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/adjustHue.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/darken.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/desaturate.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/getLuminance.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/getContrast.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/rgba.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/mix.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/getScale.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/hasBadContrast.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/lighten.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/transparentize.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/opacify.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/readableColorIsBlack.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/readableColor.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/saturate.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/toHex.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/toRgba.ts","/Users/mohammedalzafarani/Desktop/personalwebsite/node_modules/color2k/src/toHsla.ts"],"sourcesContent":["/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low: number, high: number, value: number): number {\n  return Math.min(Math.max(low, value), high);\n}\n\nexport default guard;\n","class ColorError extends Error {\n  constructor(color: string) {\n    super(`Failed to parse color: \"${color}\"`);\n  }\n}\n\nexport default ColorError;\n","import guard from './guard';\nimport ColorError from './ColorError';\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color: string): [number, number, number, number] {\n  if (typeof color !== 'string') throw new ColorError(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n\n  let normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n\n  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    const arr = Array.from(reducedHexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)),\n      parseInt(r(arr[3] || 'f', 2), 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    const arr = Array.from(hexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 16)),\n      parseInt(arr[3] || 'ff', 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    const arr = Array.from(rgbaMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 10)),\n      parseFloat(arr[3] || '1'),\n    ] as [number, number, number, number];\n  }\n\n  const hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n    if (guard(0, 100, s) !== s) throw new ColorError(color);\n    if (guard(0, 100, l) !== l) throw new ColorError(color);\n    return [...hslToRgb(h, s, l), a || 1] as [number, number, number, number];\n  }\n\n  throw new ColorError(color);\n}\n\nfunction hash(str: string) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\n\nconst colorToInt = (x: string) => parseInt(x.replace(/_/g, ''), 36);\n\nconst compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'\n  .split(' ')\n  .reduce((acc, next) => {\n    const key = colorToInt(next.substring(0, 3));\n    const hex = colorToInt(next.substring(3)).toString(16);\n\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    let prefix = '';\n    for (let i = 0; i < 6 - hex.length; i++) {\n      prefix += '0';\n    }\n\n    acc[key] = `${prefix}${hex}`;\n    return acc;\n  }, {} as { [key: string]: string });\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color: string): string {\n  const normalizedColorName = color.toLowerCase().trim();\n  const result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError(color);\n  return `#${result}`;\n}\n\nconst r = (str: string, amount: number) =>\n  Array.from(Array(amount))\n    .map(() => str)\n    .join('');\n\nconst reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nconst hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nconst rgbaRegex = new RegExp(\n  `^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\n    ',\\\\s*(\\\\d+)\\\\s*',\n    2\n  )}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`,\n  'i'\n);\nconst hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\n\nconst roundColor = (color: number): number => {\n  return Math.round(color * 255);\n};\n\nconst hslToRgb = (\n  hue: number,\n  saturation: number,\n  lightness: number\n): [number, number, number] => {\n  let l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor) as [number, number, number];\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  const huePrime = (((hue % 360) + 360) % 360) / 60;\n  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  const secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = l - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n\n  return [finalRed, finalGreen, finalBlue].map(roundColor) as [\n    number,\n    number,\n    number\n  ];\n};\n\nexport default parseToRgba;\n","// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\nimport parseToRgba from './parseToRgba';\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color: string): [number, number, number, number] {\n  const [red, green, blue, alpha] = parseToRgba(color).map((value, index) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? value : value / 255\n  );\n\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n\n  const delta = max - min;\n  const saturation =\n    lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  const hue =\n    60 *\n    (red === max\n      ? (green - blue) / delta + (green < blue ? 6 : 0)\n      : green === max\n      ? (blue - red) / delta + 2\n      : (red - green) / delta + 4);\n\n  return [hue, saturation, lightness, alpha];\n}\n\nexport default parseToHsla;\n","import guard from './guard';\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number\n): string {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(\n    0,\n    100,\n    saturation * 100\n  ).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default hsla;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color: string, degrees: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h + degrees, s, l, a);\n}\n\nexport default adjustHue;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color: string, amount: number): string {\n  const [hue, saturation, lightness, alpha] = parseToHsla(color);\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\nexport default darken;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color: string, amount: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h, s - amount, l, a);\n}\n\nexport default desaturate;\n","import parseToRgba from './parseToRgba';\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color: string): number {\n  if (color === 'transparent') return 0;\n\n  function f(x: number) {\n    const channel = x / 255;\n    return channel <= 0.03928\n      ? channel / 12.92\n      : Math.pow(((channel + 0.055) / 1.055), 2.4);\n  }\n\n  const [r, g, b] = parseToRgba(color);\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\nexport default getLuminance;\n","// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\nimport getLuminance from './getLuminance';\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1: string, color2: string): number {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n\n  return luminance1 > luminance2\n    ? (luminance1 + 0.05) / (luminance2 + 0.05)\n    : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\nexport default getContrast;\n","import guard from './guard';\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red: number, green: number, blue: number, alpha: number): string {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(\n    0,\n    255,\n    green\n  ).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default rgba;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1: string, color2: string, weight: number): string {\n  const normalize = (n: number, index: number) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? n : n / 255;\n\n  const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n  const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  const alphaDelta = a2 - a1;\n  const normalizedWeight = weight * 2 - 1;\n  const combinedWeight =\n    normalizedWeight * alphaDelta === -1\n      ? normalizedWeight\n      : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  const weight2 = (combinedWeight + 1) / 2;\n  const weight1 = 1 - weight2;\n\n  const r = (r1 * weight1 + r2 * weight2) * 255;\n  const g = (g1 * weight1 + g2 * weight2) * 255;\n  const b = (b1 * weight1 + b2 * weight2) * 255;\n  const a = a2 * weight + a1 * (1 - weight);\n\n  return rgba(r, g, b, a);\n}\n\nexport default mix;\n","import mix from './mix';\nimport guard from './guard';\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale(...colors: string[]): (n: number) => string {\n  return (n) => {\n    const lastIndex = colors.length - 1;\n    const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n\n    const color1 = colors[lowIndex];\n    const color2 = colors[highIndex];\n\n    const unit = 1 / lastIndex;\n    const weight = (n - unit * lowIndex) / unit;\n\n    return mix(color1, color2, weight);\n  };\n}\n\nexport default getScale;\n","import getContrast from './getContrast';\n\nconst guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7,\n};\n\n/**\n * Returns whether or not a color has bad contrast against \n * a white background according to a given standard\n */\nfunction hasBadContrast(\n  color: string,\n  standard: 'decorative' | 'readable' | 'aa' | 'aaa' = 'aa'\n): boolean {\n  return getContrast(color, '#fff') < guidelines[standard];\n}\n\nexport default hasBadContrast;\n","import darken from './darken';\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color: string, amount: number): string {\n  return darken(color, -amount);\n}\n\nexport default lighten;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color: string, amount: number): string {\n  const [r, g, b, a] = parseToRgba(color);\n  return rgba(r, g, b, a - amount);\n}\n\nexport default transparentize;\n","import transparentize from './transparentize';\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color: string, amount: number): string {\n  return transparentize(color, -amount);\n}\n\nexport default opacify;\n","import getLuminance from './getLuminance';\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color: string): boolean {\n  return getLuminance(color) > 0.179;\n}\n\nexport default readableColorIsBlack;\n","import readableColorIsBlack from './readableColorIsBlack';\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color: string): string {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\nexport default readableColor;\n","import desaturate from './desaturate';\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color: string, amount: number): string {\n  return desaturate(color, -amount);\n}\n\nexport default saturate;\n","import parseToRgba from './parseToRgba';\nimport guard from './guard';\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color: string): string {\n  const [r, g, b, a] = parseToRgba(color);\n\n  let hex = (x: number) => {\n    const h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? `0${h}` : h;\n  };\n\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n\nexport default toHex;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color: string): string {\n  return rgba(...parseToRgba(color));\n}\n\nexport default toRgba;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color: string): string {\n  return hsla(...parseToHsla(color));\n}\n\nexport default toHsla;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}